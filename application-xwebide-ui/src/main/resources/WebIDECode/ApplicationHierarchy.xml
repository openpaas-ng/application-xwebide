<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc reference="WebIDECode.ApplicationHierarchy" locale="">
  <web>WebIDECode</web>
  <name>ApplicationHierarchy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebIDECode.ApplicationClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1434704312000</creationDate>
  <date>1448976541000</date>
  <contentUpdateDate>1448975088000</contentUpdateDate>
  <version>1.1</version>
  <title>ApplicationHierarchy</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>95d6ad85-599f-40f3-b936-d2312fb7a8df</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>if(require.toUrl('xwiki-meta').substr(0,7) === '/xwiki/') {
  var required = ['jquery', 'xwiki-meta'];
}
else {
  var required = ['jquery'];
}
var WebIDESavedContent = []; //WebIDE plugins (such as RealTime) should be able to modify the value of the saved content
require(required , function ($, xm) {

$(function(){

  /*
   * STRUCTURE:
   ** Hierarchy API
   ** WikiEditor API
   ** ObjectEditor API
   ** Variables
   ** WebIDE initialization
   ** Hierarchy initialization
   ** Commons API
   *** Project browsing tools
   *** Common setters/getters
   *** Title tools
   *** Tabs tools
   *** CodeMirror editor tools
   *** Modals tools
   *** Nested Spaces tools
   ** Other
   */

  //-------------------------------------
  //----------- Hierarchy API -----------
  //-------------------------------------
  //
  //Hierarchy.reload()
  //Hierarchy.changeTreeView()
  //Hierarchy.rename(type, renameFrom, renameTo, updateList)
  //Hierarchy.removeFolder(folder)
  //Hierarchy.removePage(page)
  //Hierarchy.addFolder(folder)
  //Hierarchy.addExistingPage(pageFullName)
  //Hierarchy.init()
  //Hierarchy.initModals()
  //Hierarchy._addFolderModalShortcut()
  //Hierarchy._addExistingPageModalShortcut()

  var Hierarchy = {
    /**
   * Reload completely the project content (hierarchy) :
   * 1/ Get the plain content of ApplicationHierarchy
   * 2/ Change the html content and call "init()" to register again the "click" events in the menu
   */
    reload: function() {
      $('#hierarchyRefresh').off('click');
      $('#hierarchyRefresh span').hide();
      var spinner = $('&lt;img title="Reloading the menu..."/&gt;').attr('src', '/'+XWiki.webapppath+'resources/icons/xwiki/spinner.gif').appendTo('#hierarchyRefresh');
      $.ajax({
        url: WebIDE.wikiGetURL+"WebIDECode/ApplicationHierarchy?xpage=plain&amp;language="+$('#hierarchyMainLanguage').val(),
        type: "GET",
        datatype : "html",
        data : "action="+XWiki.contextaction+"&amp;editor="+WebIDE.currentEditor+"&amp;masterPage="+WebIDE.masterSpace+"."+WebIDE.masterPage+"&amp;remotePage="+getCurrentSpace(true)+"."+getCurrentPage(true)+"&amp;visibleSpaces="+encodeURIComponent(WebIDE.visibleSpaces)+"&amp;visiblePages="+encodeURIComponent(WebIDE.visiblePages)+"&amp;visibleCategory="+encodeURIComponent(WebIDE.visibleCategory)+"&amp;treeview="+WebIDE.currentTree,
        contentType: "text/html",
      }).success(function(data){
        //Update the hierarchy content (list of documents only)
        var result = $('&lt;div /&gt;').append(data).find('#hierarchyContent').html();
        $('#hierarchyContent').html(result);
        $('#hierarchyPageFolder').html($('#hierarchyUpdatedFolderList').html());
        var parameters = [];
        if(Modules[WebIDE.currentEditor]) {
          parameters = Modules[WebIDE.currentEditor].getParameters();
        }
        setActiveTab(WebIDE.currentEditor, getCurrentPage(false), getCurrentSpace(false), parameters);
        Hierarchy.init();
      }).complete(function() {
        $('#hierarchyRefresh').on('click', Hierarchy.reload);
        $('#hierarchyChangeTree').on('click', Hierarchy.changeTreeView);
        spinner.remove();
        $('#hierarchyRefresh span').show();
      });
    },

    /**
   * Change the current tree view in the menu
   */
    changeTreeView : function() {
      $('#hierarchyChangeTree').off('click', Hierarchy.changeTreeView);
      if(WebIDE.currentTree == 'physical') {
        WebIDE.currentTree = 'logical';
        setCookieHierarchy('currentTree', 'logical', 31);
      }
      else {
        WebIDE.currentTree = 'physical';
        setCookieHierarchy('currentTree', 'physical', 31);
      }
      Hierarchy.reload();
    },

    /**
   * Rename a page or a folder in the project :
   * 1/ Use the ApplicationRename page to rename the content
   * 2/ Update the hierarchy if success
   * @input String type : the type of content to rename (file or folder)
   * @input String renameFrom : the name to change
   * @input String renameTo : the new name
   */
    rename : function(type, renameFrom, renameTo, updateList) {
      if(!WebIDE.SAVING) {
        setSavingState(true, 'Renaming in progress...');
        var addUpdateList = '&amp;updateList='+updateList;
        $.ajax({
          url: WebIDE.wikiGetURL+"WebIDECode/ApplicationRename",
          type: "POST",
          data: "outputSyntax=plain&amp;"+type+"=1&amp;masterPage="+WebIDE.masterSpace+"."+WebIDE.masterPage+"&amp;renameFrom="+renameFrom+"&amp;renameTo="+renameTo+addUpdateList,
        }).success(function(data) {
          setSavingState(false, 'Renaming performed', 2500);
          Hierarchy.reload();
        }).error(function(xhr) {
          setSavingState(false, xhr.statusText, 4000, 'red');
        });
      }
    },

    /**
   * Remove a folder from the hierarchy (= from the project) :
   * 1/ Get the list of folders in the project
   * 2/ Check if the folder is in the project and remove it if necessary
   * 3/ Update the hierarchy if success
   * @input String folder
   */
    removeFolder : function(folder) {
      setHierarchyState('Removing folder...');
      $.ajax({
        url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
        type: "GET",
        contentType: "application/xml",
      }).success(function(res){
        var oldSpaces = $(res).find('value').text();
        var spaceArray = oldSpaces.split('|');
        var indexSpace = $.inArray(decodeURIComponent(folder), spaceArray)
        if(indexSpace &gt;= 0) {
          spaceArray.splice(indexSpace, 1);
          $.ajax({
            url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
            type: "PUT",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "property#spaces="+encodeURIComponent(spaceArray),
          }).success(function(){
            setHierarchyState('Folder removed from project', 2500);
            Hierarchy.reload();
          }).error(function(xhr){
            setHierarchyState(xhr.statusText, 4000, 'red');
          });
        }
        else {
          console.log("Folder "+folder+" not found in the list of folders in this project.");
        }
      });
    },

    /**
   * Remove a page from the hierarchy (= from the project) :
   * 1/ Get the list of pages in the project
   * 2/ Check if the page is in the project and remove it if necessary
   * 3/ Update the hierarchy if success
   * @input String page
   */
    removePage : function(page) {
      setHierarchyState('Removing page...');
      $.ajax({
        url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
        type: "GET",
        contentType: "application/xml",
      }).success(function(res){
        var oldPages = $(res).find('value').text();
        var pageArray = oldPages.split('|');
        var indexSpace = $.inArray(page, pageArray)
        if(indexSpace &gt;= 0) {
          pageArray.splice(indexSpace, 1);
          $.ajax({
            url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
            type: "PUT",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "property#pages="+encodeURIComponent(pageArray),
          }).success(function(){
            setHierarchyState('Page removed from project', 2500);
            Hierarchy.reload();
          }).error(function(xhr){
            setHierarchyState(xhr.statusText, 4000, 'red');
          });
        }
      });
    },

    /**
   * Add a folder in the hierarchy list :
   * 1/ Check that the folder doesn't already exists
   * 2/ Add the folder in the list alphabetically sorted
   * 3/ Update the hierarchy
   * @input String folder
   */
    addFolder : function(folder) {
      setHierarchyState('Adding folder...');
      $.ajax({
        url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
        type: "GET",
        contentType: "application/xml",
      }).success(function(res){
        var oldSpaces = $(res).find('value').text();
        var spaceArray = oldSpaces.split('|');
        if($.inArray(folder, spaceArray) == -1) {
          spaceArray.push(folder);
          spaceArray = spaceArray.sort();
          $.ajax({
            url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
            type: "PUT",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "property#spaces="+encodeURIComponent(spaceArray),
          }).success(function(){
            $('#hierarchyNewFolderName').val('');
            if(WebIDE.bootstrap()) {
              $('#hierarchyFolderModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            setHierarchyState('Folder added', 2500);
            Hierarchy.reload();
          }).error(function(xhr){
            $('#hierarchyNewFolderName').val('');
            if(WebIDE.bootstrap()) {
              $('#hierarchyFolderModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            setHierarchyState(xhr.statusText, 4000, 'red');
          });
        }
      });
    },

    /**
   * Add an existing page in the hierarchy list :
   * 1/ Check that the page exists
   * 2/ Add the page in the list alphabetically sorted
   * 3/ Update the hierarchy
   * @input String fullName
   */
    addExistingPage : function(pageFullName) {
      var existingPage = pageFullName;
      var existingPageList = getSpaceAndName(existingPage);
      var existingPageSpace = existingPageList[0];
      var existingPageName = existingPageList[1];
      var restSpaces = getRestSpacesString(existingPageSpace);
      var restSpacesMaster = getRestSpacesString(WebIDE.masterSpace);
      setHierarchyState('Adding page...');
      $.ajax({
        url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+existingPageName,
        type: "GET",
        contentType: "application/xml",
      }).error(function(){
        $('#hierarchyExistingPageModalError').html('ERROR : Unexisting page').show().delay(4000).queue(function(n) {
          $(this).hide().html('');
          n();
        });
      }).success(function(){
        $.ajax({
          url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpacesMaster+"/pages/"+WebIDE.masterPage+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
          type: "GET",
          contentType: "application/xml",
        }).success(function(res){
          var oldPages = $(res).find('value').text();
          var pageArray = oldPages.split('|');
          if($.inArray(existingPage, pageArray) == -1) {
            pageArray.push(existingPage);
            pageArray = pageArray.sort();
            $.ajax({
              url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
              type: "PUT",
              contentType: "application/x-www-form-urlencoded",
              accept: "application/xml",
              data: "property#pages="+encodeURIComponent(pageArray),
            }).success(function(){
              $('#hierarchyExistingPageName').val('');
              if(WebIDE.bootstrap()) {
                $('#hierarchyExistingPageModal').modal('hide');
              }
              else {
                closeModalNoBootstrap();
              }
              setHierarchyState('Page added', 2500);
              Hierarchy.reload();
            }).error(function(xhr){
              $('#hierarchyExistingPageName').val('');
              if(WebIDE.bootstrap()) {
                $('#hierarchyExistingPageModal').modal('hide');
              }
              else {
                closeModalNoBootstrap();
              }
              setHierarchyState(xhr.statusText, 4000, 'red');
            });
          }
        });
      });
    },

    // Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy)
    init : function() {
      // Display or hide the content of a folder by clicking on its name
      $('.hierarchy-toggleFolder').off('click');
      $('.hierarchy-toggleFolder').on('click', function(){
        var spaceToggle = $(this).attr('data-space');
        $(document.getElementById('hierarchySpace_'+spaceToggle)).toggle();
        var indexSpace = $.inArray(spaceToggle, WebIDE.visibleSpaces);
        if($(document.getElementById('hierarchySpace_'+spaceToggle)).is(':hidden')) {
          if(indexSpace &gt;= 0) {
            WebIDE.visibleSpaces.splice(indexSpace, 1);
          }
          $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).find('span').attr('class', 'fa fa-caret-right');
        }
        else {
          if(indexSpace &lt; 0) {
            WebIDE.visibleSpaces.push(spaceToggle);
          }
          $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).find('span').attr('class', 'fa fa-caret-down');
        }
        setCookieHierarchy('visibleSpaces', WebIDE.visibleSpaces, 365);
      });
      // Display or hide the details of a page by clicking on its name
      $('.hierarchy-displayPage').off('click');
      $('.hierarchy-displayPage').on('click', function(){
        var pageToggle = $(this).attr('data-pageid');
        $(document.getElementById('hierarchyPageDetails_'+pageToggle)).toggle();
        var indexPage = $.inArray(pageToggle, WebIDE.visiblePages);
        if($(document.getElementById('hierarchyPageDetails_'+pageToggle)).is(':hidden')) {
          if(indexPage &gt;= 0) {
            WebIDE.visiblePages.splice(indexPage, 1);
          }
          $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-right');
        }
        else {
          if(indexPage &lt; 0) {
            WebIDE.visiblePages.push(pageToggle);
          }
          $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-down');
        }
        setCookieHierarchy('visiblePages', WebIDE.visiblePages, 365);
      });
      $('.hierarchy-toggleCategory').off('click');
      $('.hierarchy-toggleCategory').on('click', function(){
        var category = $(this).attr('data-category');
        $(document.getElementById('hierarchyCategory_'+category)).toggle();
        var indexCategory = $.inArray(category, WebIDE.visibleCategory);
        if($(document.getElementById('hierarchyCategory_'+category)).is(':hidden')) {
          if(indexCategory &gt;= 0) {
            WebIDE.visibleCategory.splice(indexCategory, 1);
          }
          $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-right');
        }
        else {
          if(indexCategory &lt; 0) {
            WebIDE.visibleCategory.push(category);
          }
          $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-down');
        }
        setCookieHierarchy('visibleCategory', WebIDE.visibleCategory, 365);
      });
      // Add a folder (if no bootstrap)
      $('.newFolder').off('click');
      $('.newFolder').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.bootstrap()) {
          openModalNoBootstrap('#hierarchyFolderModal');
          Hierarchy._addFolderModalShortcut();
        }
      });
      // Add an existing page (if no bootstrap)
      $('.newExistingPage').off('click');
      $('.newExistingPage').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.bootstrap()) {
          openModalNoBootstrap('#hierarchyExistingPageModal');
          Hierarchy._addExistingPageModalShortcut();
        }
      });

      // Remove a folder by clicking on the cross
      $('.hierarchy-remove-folder').off('click');
      $('.hierarchy-remove-folder').on('click', function(){
        Hierarchy.removeFolder(decodeURI($(this).attr('data-space')));
      });
      // Remove a page by clicking on the cross
      $('.hierarchy-remove-page').off('click');
      $('.hierarchy-remove-page').on('click', function(){
        Hierarchy.removePage(decodeURI($(this).attr('data-pageid')));
      });
      // Rename a folder by clicking on the pencil
      $('.hierarchy-rename-folder').off('click');
      $('.hierarchy-rename-folder').on('click', function(){
        var selector = document.getElementById('renameFolder_'+$(this).attr('data-space'));
        var selector2 = document.getElementById('hierarchyDisplaySpace_'+$(this).attr('data-space'));
        $(selector).show();
        $(selector).val(decodeURIComponent($(this).attr('data-subspace')));
        var renameFrom = $(this).attr('data-space');
        $(selector2).parent().hide();
        $(selector).focus();
        $(selector).focusout(function() {
          $(selector).hide();
          $(selector).val(renameFrom);
          $(selector2).parent().show();
          shortcut.remove("Esc");
          shortcut.remove("Enter");
        });
        shortcut.add("Esc", function() {
          $(selector).hide();
          $(selector).val(renameFrom);
          $(selector2).parent().show();
          shortcut.remove("Esc");
          shortcut.remove("Enter");
        });
        shortcut.add("Enter", function() {
          var renameTo = $(selector).val();
          Hierarchy.rename('space', renameFrom, renameTo);
          shortcut.remove("Esc");
          shortcut.remove("Enter");
        });
      });
      // Rename a page by clicking on the pencil
      $('.hierarchy-rename-page').off('click');
      $('.hierarchy-rename-page').on('click', function(){
        var selector = document.getElementById('renamePage_'+$(this).attr('data-pageid'));
        var selector2 = document.getElementById('hierarchyDisplayPage_'+$(this).attr('data-pageid'));
        var updatePageList = $(selector).attr('data-pageinlist');
        $(selector).show();
        $(selector).val(decodeURIComponent($(this).attr('data-pageid')));
        var renameFrom = $(selector).val();
        $(selector2).parent().hide();
        $(selector).focus();
        $(selector).focusout(function() {
          $(selector).hide();
          $(selector).val(renameFrom);
          $(selector2).parent().show();
          shortcut.remove("Esc");
          shortcut.remove("Enter");
        });
        shortcut.add("Esc", function() {
          $(selector).hide();
          $(selector).val(renameFrom);
          $(selector2).parent().show();
          shortcut.remove("Esc");
          shortcut.remove("Enter");
        });
        shortcut.add("Enter", function() {
          var renameTo = $(selector).val();
          Hierarchy.rename('page', renameFrom, renameTo, updatePageList);
          shortcut.remove("Esc");
          shortcut.remove("Enter");
        });
      });
      for (var editor in Modules) {
        Modules[editor].initMenu();
      }
    },

    /**
   * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
   */
    initModals : function() {
      for (var editor in Modules) {
        Modules[editor].initModals();
      }
      // If Bootstrap is disabled (Colibri skin), create custom modals. Let a delay before testing bootstrap in case it is loaded after the Web IDE.
      window.setTimeout(function () {
        if(!WebIDE.bootstrap()) {
          $('button[data-dismiss="modal"]').click(function() {
            closeModalNoBootstrap();
          });
          $('.modal').css({
            "width" : "40%",
            "border" : "1px solid black",
            "backgroundColor" : "#FFFFFF",
            "borderRadius" : "5px",
            "position" : "fixed",
            "left" : "30%",
            "top" : "20%",
            "padding" : "10px",
            "zIndex" : "1000"
          });
          $('.modal-header .close').css({
            "float" : "right",
            "position" : "absolute",
            "right" : "5px",
            "top" : "5px"
          });
          // Add support for the bootstrap buttons in Colibri skin (.btn, .btn-primary, .btn-success, .btn-danger, .btn-default)
          $('html &gt; head').append($('&lt;style&gt;.btn{border-radius:5px;padding:3px;color:white;cursor:pointer;}.btn-primary{background-color:#337AB7;border-color:#2E6DA4;}.btn-success{background-color:#5CB85C;border-color:#4CAE4C;}.btn-danger{background-color:#C9302C;border-color:#AC2925;}.btn-default{border-color:#000000;color:black;}&lt;/style&gt;'));
        }
      }, 100);
      $('input[type=radio][name=hierarchyAddPageType]').change(function() {
        if(this.value == 'content') {
          $('#hierarchyAddPageItemBlock').hide();
        }
        else if(this.value == 'item') {
          $('#hierarchyAddPageItemBlock').show();
          $('#hierarchyAddPageItem').html($('#hierarchyUpdatedClassList').html());
        }
      });
      $('#backgroundModalNoBootstrap').click(closeModalNoBootstrap);
      // Reset the tab to close when the user cancel the action :
      $('#hierarchyCloseTabModal').on('hidden.bs.modal', resetTabToClose);
      // Autofocus on text inputs when a modal appears and "Enter" shortcut:
      $('#hierarchyFolderModal').on('shown.bs.modal', Hierarchy._addFolderModalShortcut);
      $('#hierarchyExistingPageModal').on('shown.bs.modal', Hierarchy._addExistingPageModalShortcut);
      $('#hierarchyFolderModal').on('hidden.bs.modal', removeEnterShortcut);
      $('#hierarchyExistingPageModal').on('hidden.bs.modal', removeEnterShortcut);
      $('#hierarchyAddFolder').click(function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        if($('#hierarchyNewFolderName').val().trim()) {
          Hierarchy.addFolder($('#hierarchyNewFolderName').val());
        }
        else {
          $('#hierarchyFolderModalError').html('ERROR : You have to fill the name of the folder!').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        }
      });
      $('#hierarchyAddExistingPage').click(function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        if($('#hierarchyExistingPageName').val().trim()) {
          Hierarchy.addExistingPage($('#hierarchyExistingPageName').val());
        }
        else {
          $('#hierarchyExistingPageModalError').html('ERROR : You have to fill the name of the page!').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        }
      });

      // Save or discard the content when a tab is closed ? :
      $('#hierarchySaveAndCloseModal, #hierarchyDiscardAndCloseModal').click(function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING &amp;&amp; WebIDE.nextTabToClose) {
          var closedTab = WebIDE.nextTabToClose;
          var tabNumberId = $(closedTab).attr('data-tabnumber');
          $('body').removeClass('modal-open');
          if(WebIDE.bootstrap()) {
            $('#hierarchyCloseTabModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          // Determine the editor used in the selected tab
          var selectedTabEditor = $(closedTab).attr('data-editor');
          if($(this).attr('id') === 'hierarchySaveAndCloseModal') {
            Modules[selectedTabEditor].save(tabNumberId, false, true, false);
          }
          removeTab(closedTab, tabNumberId);
        }
      });
    },

    /**
   * Add the "Enter" shortcut (meaning the user agreed to do the selected action) when a modal is shown/hidden
   */
    _addFolderModalShortcut : function() {
      $('#hierarchyNewFolderName').focus();
      shortcut.add("Enter", function() {
        $('#hierarchyAddFolder').click();
      });
    },
    _addExistingPageModalShortcut : function() {
      $('#hierarchyExistingPageName').focus();
      shortcut.add("Enter", function() {
        $('#hierarchyAddExistingPage').click();
      });
    }
  };

  //-------------------------------------
  //-------------- MODULES --------------
  //-------------------------------------
  /**
   * --------- Required elements ---------
   * editor
   *   Simple name of the editor which will be used in IDs (e.g : 'wiki', 'object', 'class', etc...)
   * load()
   *   Load the current page with the current parameters in the displayed tab
   *   Must check if there are other tabs to open at the end : if(loadAllTabs) {WebIDE.continueLoadAll();}
   * save(tabNumberId, changeSavedContent, continueEditing, saveAll)
   *   Save the content in the tab identified by "tabNumberId"
   *   @params boolean changeSavedContent : should the value of "savedContent" variable be changed? (true if the tab will still be opened after the save)
   *   @params boolean continueEditing : true = stay in the WebIDE, false = redirect to the view mode of the page
   *   @params boolean saveAll : true if it has been called by the "save all tabs" button (which means it should call "continueSaveAll(true);" when success)
   * getParameters()
   *   Get the current value of the parameters from this module. 
   *   Parameters are data needed to identified a tab ([locale] for WikiEditor, [objectClass, objectNumber] for ObjectEditor)
   *   @out Array parameters : the list of module parameters values
   * setParameters(parameters)
   *   @params Array parameters : the new value of the module parameters
   * resetParameters()
   *   Reset the parameters to "null"
   * getTabButtonParameters(parameters)
   *   Get a string describing parameters with "data-..." attributes
   *   @params Array parameters : the parameters to format into string
   *   @out String : the list of parameters formatted as HTML attributes ('data-locale="en"' or 'data-object="..." data-objectnumber="0"')
   * getParametersFromTab(tabButton)
   *   Get the value of the module parameters in a tab
   *   @input DOM tabButton : the button element for a tab, with the module parameters as HTML attributes
   *   @out Array parameters : the parameters found in attributes of the button
   * getMenuElement(folder, file, parameters)
   *   Get the DOM element representing the current tab (folder/file/parameters) in the menu (the "link" used to open the tab the first time)
   *   @input folder, file, parameters : the data representing a selected tab
   *   @out DOM element : the "link" in the menu used to open a tab with folder/file/parameters
   * getTabName(folder, file, parameters)
   *   Get a name representing the tab (folder/file/parameters)
   *   @input folder, file, parameters : the data representing a selected tab
   *   @out String : the name to display in the tab button
   * getCurrentContent(tabElement)
   *   Get a text representing the content of the tab, which is used when the editor checks for unsaved content
   *   @input DOM tabElement : the tab main "div"
   *   @out Text : the content of the tab
   * initCodeMirror(tabId)
   *   Initialize CodeMirror for the textarea's in the tab (tabId). The method should initialize CodeMirror for textarea containing code (Cd ObjectEditor.initCodeMirror())
   *   @input String tabId : the tab ID
   * initHash(hashArray)
   *   Initialize the parameters contained in the hash.
   *   @input Array hashArray : a list of elements required to identify a tab. Parameters start at the 6th position (hashArray[5] for the first parameter)
   * setDeleteButton()
   *   Set the action performed when the user clicks on the "Delete" button at the bottom of the page in a tab using this module.
   * initMenu()
   *   Initialize the links in the menu (Logical/Physical views) related to this module.
   *   e.g. : element with the class "editPage" should open a new tab with WikiEditor module.
   * initModals()
   *   Initialize the modal events related to this module (can be empty of modals aren't used).
   *   e.g. : click on the "Add page" button in the modal "Create a new page" should trigger WikiEditor.add(...).
   * ------- Recommended methods -------
   * remove(...)
   *   Ability to remove an element from this module (e.g. : an object for ObjectEditor, a page for WikiEditor).
   *   Must be managed internally in the module (with initMenu() and initModals() to add the events triggering "remove()")
   * add(...)
   *   Ability to add an element from this module (e.g. : an object for ObjectEditor, a page for WikiEditor).
   *   Must be managed internally in the module (with initMenu() and initModals() to add the events triggering "add()")
   */
  //---------- WikiEditor Module ----------
  /**
   * ----- Internal variable -----
   * currentLocale
   *   The language of the page edited in the current tab
   * ----- Internal methods -----
   * _addModalShortcut()
   *   Add shortcuts when the "page" modal is opened
   * _setCurrentLocale()
   *   Set the value of currentLocale
   */
  var WikiEditor = {
    editor : 'wiki',
    currentLocale: '',
    load : function(loadAllTabs) {
      if(WebIDE.currentEditor === WikiEditor.editor) {
        setLoadingState(true);
        var urlSpaces = getCurrentSpace(false, true);
        var urlPage = getCurrentPage(false);
        var locale = (WikiEditor.currentLocale &amp;&amp; WikiEditor.currentLocale !== '') ? WikiEditor.currentLocale : 'default';
        $.ajax({
          url: WebIDE.wikiViewURL+urlSpaces+"/"+urlPage+"?xpage=plain&amp;raw=2&amp;language="+locale,
          type: "GET",
          contentType: "plain/text",
        }).success(function(dataContent){
          var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), WikiEditor.getParameters());
          var jQueryTabId = '#'+tabId;
          var tabNumberId = getTabNumber(jQueryTabId);
          var rawtitle = decodeURIComponent(getRawTitle(getCurrentSpace(false), getCurrentPage(false), locale));
          var parentPage = decodeURIComponent(getParentPage(getCurrentSpace(false), getCurrentPage(false), locale));
          var isHidden = WikiEditor._getHidden(getCurrentSpace(false), getCurrentPage(false), locale);
          var menuBlock = initOtherFieldsBlock($(jQueryTabId), jQueryTabId, "Advanced fields");
          var relatedElementsBlock = initOtherFieldsBlock($(jQueryTabId), jQueryTabId, "Related elements");
          $(jQueryTabId).append('&lt;div class="editorWikiTabContent"&gt;&lt;div class="editorPropertyLabel"&gt;&lt;p class="editorWikiTitleLabel"&gt;Title&lt;/p&gt;&lt;/div&gt; &lt;input type="text" class="editorWikiTitle" value="'+rawtitle+'" /&gt;&lt;div class="editorPropertyLabel"&gt;&lt;p class="editorWikiTitleLabel"&gt;Content&lt;/p&gt;&lt;/div&gt;&lt;textarea id="content_'+tabId+'"&gt;&lt;/textarea&gt;&lt;/div&gt;');
          $(jQueryTabId+' &gt; .editorWikiTabContent &gt; textarea').val(dataContent);
          var advancedFieldBlock = $(menuBlock).find('.editorOtherFieldsBlockContent');
          var addHidden = '';
          var hiddenState = '0';
          if(isHidden === "true") {
            addHidden = ' checked="checked"';
            hiddenState = '1';
          }
          $(advancedFieldBlock).append('&lt;div class="editorPropertyLabel"&gt;&lt;p&gt;Parent&lt;/p&gt;&lt;/div&gt; &lt;input type="text" class="editorWikiParent" value="'+parentPage+'" size="45"/&gt;&lt;br&gt;&lt;div class="editorPropertyLabel"&gt;&lt;p&gt;Hidden document&lt;/p&gt;&lt;/div&gt; &lt;input type="checkbox" class="editorWikiHidden" '+addHidden+'/&gt;&lt;input type="hidden" class="editorWikiHiddenSaved" value="'+hiddenState+'"/&gt;');
          WikiEditor._loadRelatedElements(getCurrentSpace(false), getCurrentPage(false), relatedElementsBlock);
          if(WebIDE.syntaxHighlighting) {
            // Add the CodeMirror editor
            initCodeMirrorsCustom(WebIDE.currentEditor, tabId);
          }
          setSavedContent(tabNumberId);
          setLoadingState(false, 'Loaded', 2500);
          if(loadAllTabs) {
            WebIDE.continueLoadAll();
          }
        }).error(function(xhr) {
          var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), WikiEditor.getParameters());
          var jQueryTabId = '#'+tabId;
          var tabNumberId = getTabNumber(jQueryTabId);
          removeTab($('.editorTabButton[data-tabnumber="'+tabNumberId+'"]'), tabNumberId);
          setLoadingState(false, 'Error while loading "'+getCurrentSpace(false)+'.'+getCurrentPage(false)+'": '+xhr.statusText, 4000, 'red');
          if(loadAllTabs) {
            WebIDE.continueLoadAll();
          }
        });
      }
    },
    save : function(tabNumberId, changeSavedContent, continueEditing, saveAll) {
      if(!WebIDE.SAVING || saveAll) {
        if(!saveAll) {
          setSavingState(true);
        }
        var tabButtonElement = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
        var page = decodeURIComponent($(tabButtonElement).attr('data-page'));
        var space = decodeURIComponent($(tabButtonElement).attr('data-space'));
        var locale = $(tabButtonElement).attr('data-locale');
        var jQueryTabId = '#'+getTabId(WikiEditor.editor, space, page, WikiEditor.getParameters());
        var restSpaces = getRestSpacesString(space);
        var restLocale = (locale === 'default' || locale === '') ? '' : '/translations/'+locale;
        var fileTitle = getCurrentTitle(jQueryTabId);
        var fileContent = getCurrentContent(tabNumberId);
        var fileParent = getCurrentParent(jQueryTabId);
        var hiddenState = $(jQueryTabId+' .editorWikiHidden').is(':checked') ? 1 : 0;
        $.ajax({
          url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+page+restLocale,
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "title="+encodeURIComponent(fileTitle)+"&amp;content="+encodeURIComponent(fileContent)+"&amp;parent="+encodeURIComponent(fileParent),
        }).error(function(xhr, errorStatus){
          if(!saveAll) {
            setSavingState(false, xhr.statusText, 4000, 'red');
            return false;
          }
          else {
            continueSaveAll(false, xhr, space, page);
          }
        }).success(function(data){
          if(hiddenState !== parseInt($(jQueryTabId+' .editorWikiHiddenSaved').val())) {
            WikiEditor._setHidden(space, page, locale, hiddenState);
          }
          if(changeSavedContent) {
            setSavedContent(tabNumberId);
          }
          setStar(false, tabNumberId);
          if(!saveAll) {
            setSavingState(false, 'Saved', 2500);
            if(continueEditing) return true;
            else window.location.href = WebIDE.wikiViewURL+space+'/'+page;
          }
          else {
            continueSaveAll(true);
          }
        });
      }
    },
    getParameters : function() {
      var locale = WikiEditor.currentLocale || 'default';
      return [locale];
    },
    setParameters : function(parameters) {
      var locale = parameters[0] || 'default';
      WikiEditor._setCurrentLocale(locale);
    },
    resetParameters : function() {
      WikiEditor._setCurrentLocale(null);
    },
    getTabButtonParameters : function(parameters) {
      return 'data-locale="'+parameters[0]+'"';
    },
    getParametersFromTab : function(tabButton) {
      return [$(tabButton).attr('data-locale')];
    },
    getMenuElement : function(folder, file, parameters) {
      return $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+parameters[0]+'"]')
    },
    getTabName : function(folder, file, parameters) {
      return (parameters[0] &amp;&amp; parameters[0] !== 'default') ? '('+parameters[0]+') '+file+' ('+decodeURIComponent(folder)+')' : file+' ('+decodeURIComponent(folder)+')';
    },
    getCurrentContent : function (tabElement) {
      var tabWikiElement = $(tabElement).find('textarea:first');
      return $(tabWikiElement).val();
    },
    initCodeMirror : function(tabId) {
      if($('#syntaxHState').val() === 'old') { //SyntaxHighlighting &lt;= 2.2
        initCodeMirror('#content_'+tabId, 'xwiki');
      }
      else { //SyntaxHighlighting &gt;= 3.0
        initCodeMirror('#content_'+tabId, XWiki.docsyntax);
      }
    },
    initHash : function(hashArray) {
      if(hashArray.size() === 6) {
        WikiEditor.setParameters([hashArray[5]]);
      }
    },
    setDeleteButton : function() {
      $('#hierarchyDeleteButtonIDE').val('Delete this page from XWiki');
      $('#hierarchyDeleteButtonIDE').off('click');
      $('#hierarchyDeleteButtonIDE').on('click', function() {
        $('#editorDeletedPageModalInfo').html(getCurrentSpace(false)+' - '+getCurrentPage(false));
        $('#editorDeletePageConfirmed').attr('data-page', getCurrentPage(false));
        $('#editorDeletePageConfirmed').attr('data-space', getCurrentSpace(false));
        var locale = WikiEditor.currentLocale || 'default';
        $('#editorDeletePageConfirmed').attr('data-locale', locale);
        if(WebIDE.bootstrap()) {
          $('#editorDeletePageModal').modal('show');
        }
        else {
          openModalNoBootstrap('#editorDeletePageModal');
        }
      });
    },
    /**
     * Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy) :
     */
    initMenu : function() {
      // Add a page (if no bootstrap) / Change the folder to use when adding a new page
      $('.newPage').off('click');
      $('.newPage').on('click', function(e){
        e.preventDefault();
        var modal = true;
        $('#hierarchyAddPageTypeBlock').hide();
        $('#hierarchyAddPageLocaleBlock').hide();
        $('#hierarchyNewPageName').attr('disabled', false);
        $('#hierarchyPageFolder').attr('disabled', false);
        var folder = $(this).attr('data-space') || '';
        var file = $(this).attr('data-page') || '';
        file = encodeURIComponent(file);

        $('#hierarchyPageFolder').val(folder);
        $('#hierarchyNewPageName').val(file);

        if($(this).hasClass('newLanguage')) {
          $('#hierarchyAddPageTitle').html('Add new language');
          $('#hierarchyAddPageLabel').html('Page');
          $('#hierarchyAddPage').attr('data-type', 'language');
          $('#hierarchyNewPageName').attr('disabled', true);
          $('#hierarchyPageFolder').attr('disabled', true);
          $('#hierarchyAddPageLocaleBlock').show();
        }
        else {
          // If there are classes in the project, ask for item or content page
          if($('#hierarchyUpdatedClassList').length &amp;&amp; !$('#hierarchyUpdatedClassList').is(':empty')) {
            $('#hierarchyAddPageTypeBlock').show();
          }
          $('#hierarchyAddPageTitle').html('Add new page');
          $('#hierarchyAddPageLabel').html('Page name');
          $('#hierarchyAddPage').attr('data-type', 'page');
        }
        if(!WebIDE.bootstrap() &amp;&amp; modal) {
          openModalNoBootstrap('#hierarchyPageModal');
          WikiEditor._addModalShortcut();
        }
      });
      // User wants to edit a new page
      $('.editPage').off('click');
      $('.editPage').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var folder = $(this).attr('data-space');
          var file = $(this).attr('data-page');
          var locale = $(this).attr('data-locale') || 'default';
          goToNewPage(WikiEditor.editor, file, folder, [locale]);
        }
      });
      // User wants to delete a page
      $('.deletePage').off('click');
      $('.deletePage').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var folder = $(this).attr('data-space');
          var file = $(this).attr('data-page');
          var locale = $(this).attr('data-locale') || 'default';
          $('#editorDeletedPageModalInfo').html(folder+' - '+file);
          $('#editorDeletePageConfirmed').attr('data-page', file);
          $('#editorDeletePageConfirmed').attr('data-space', folder);
          $('#editorDeletePageConfirmed').attr('data-locale', locale);
          if(WebIDE.bootstrap()) {
            $('#editorDeletePageModal').modal('show');
          }
          else {
            openModalNoBootstrap('#editorDeletePageModal');
          }
        }
      });
    },
   /**
    * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
    */
    initModals : function() {
      $('#hierarchyPageModal').on('shown.bs.modal', WikiEditor._addModalShortcut);
      $('#hierarchyPageModal').on('hidden.bs.modal', removeEnterShortcut);
      // Modals click events :
      $('#hierarchyAddPage').on('click', function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        var folder = $('#hierarchyPageFolder').val();
        var file = encodeURIComponent($('#hierarchyNewPageName').val());
        if(folder &amp;&amp; file &amp;&amp; folder.trim() &amp;&amp; file.trim()) {
          // Check if it is a page, a class, a sheet or a template :
          var type = 'page';
          if($('#hierarchyAddPage').attr('data-type')) {
            type = $('#hierarchyAddPage').attr('data-type');
          }
          // Fix name with best practices
          file = fixName(file, type);
          // Check if item page
          var itemvalue;
          if(type === 'page' &amp;&amp; $('input[type=radio][name=hierarchyAddPageType]:checked').val() === 'item') {
            type = 'item';
            itemvalue = $('#hierarchyAddPageItem').val();
          }
          // Check if it is a translation
          else if(type === 'language') {
            itemvalue = $('#hierarchyAddPageLocale').val();
          }
          WikiEditor.add(folder, file, type, itemvalue);
        }
        else {
          $('#hierarchyPageModalError').html('ERROR : You have to fill all the fields!').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        }
      });
      $('#editorDeletePageConfirmed').click(function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        WikiEditor.remove($(this).attr('data-space'), $(this).attr('data-page'), $(this).attr('data-locale'));
      });
    },
    /**
     * Delete a page from the wiki :
     * @input String folder, String file, String locale
     */
    remove : function(space, page, locale) {
      if(!WebIDE.LOADING) {
        setLoadingState(true, 'Deleting...');
        var restSpaces = getRestSpacesString(space);
        var addRestLanguage = '';
        if(locale &amp;&amp; locale !== 'default') {
          addRestLanguage = '/translations/'+locale;
        }
        var restPage = page;
        $.ajax({
          url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+restPage+addRestLanguage,
          type: "DELETE",
          contentType: "plain/text",
        }).success(function(){
          // Remove all tabs related to that page if default language is deleted, or only the correct tab if another language is deleted
          if(!locale || locale === 'default') {
            var selector = '_'+encodeURIComponent(space).replace(/\./g, '2E').replace(/%/g, '')+'_'+encodeURIComponent(page).replace(/\./g, '2E').replace(/%/g, '');
            var elements = $('.editorTab[id*="'+selector+'"]');
            elements.each(function(i, elmt) {
              var tabNumberId = $(elmt).attr('data-tabnumber');
              var element = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
              removeTab(element, tabNumberId);
            });
          }
          else {
            var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
            var jQueryTabId = '#'+tabId;
            var tabNumberId = getTabNumber(jQueryTabId);
            var element = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
            removeTab(element, tabNumberId);
          }
          Hierarchy.reload();
          if(WebIDE.bootstrap()) {
            $('#editorDeletePageModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          setLoadingState(false, 'Deleted', 2500);
        }).error(function(xhr){
          setLoadingState(false, 'Error: '+xhr.statusText, 2500);
        });
      }
    },
    /**
     * Add a page in a folder :
     * 1/ Check that the page doesn't already exists
     * 2/ Create the page in the wiki
     * 3/ Update the hierarchy
     * @input String folder, String file
     */
    add : function(folder, file, type, itemValue) {
      var restSpaces = getRestSpacesString(folder);
      setHierarchyState('Adding page...');
      var addRestLanguage = '';
      var ajaxProperties;
      if(type === 'language') {
        addRestLanguage = '/translations/'+itemValue;
      }
      else if(type === 'item') { // Item page must receive an object of a selected class at the end!
        var restSpaces = getRestSpacesString(folder);
        var restPage = file;
        ajaxProperties = {
          url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+restPage+"/objects",
          method: "POST",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "className="+encodeURIComponent(itemValue),
        };
      }
      $.ajax({
        url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+file+addRestLanguage,
        type: "GET",
        contentType: "application/xml",
      }).success(function(xhr){
        $('#hierarchyPageModalError').html('ERROR : A page with the same name already exist').show().delay(4000).queue(function(n) {
          $(this).hide().html('');
          n();
        });
        setHierarchyState('ERROR : Name already used!', 4000, 'red');
      }).error(function(res){
        $.ajax({
          url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+file+addRestLanguage,
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "title="+file+"&amp;content=&amp;parent="+getCurrentSpace(true)+"."+getCurrentPage(true),
        }).success(function(){
          function callback() {
            $('#hierarchyNewPageName').val('');
            if(WebIDE.bootstrap()) {
              $('#hierarchyPageModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            setHierarchyState('Page added', 2500);
            Hierarchy.reload();
          }
          if(type !== 'item') {
            callback();
          }
          else {
            $.ajax(ajaxProperties).success(callback).error(function(xhr) {
              $('#hierarchyNewPageName').val('');
              if(WebIDE.bootstrap()) {
                $('#hierarchyPageModal').modal('hide');
              }
              else {
                closeModalNoBootstrap();
              }
              setHierarchyState(xhr.statusText, 4000, 'red');
            });
          }
        }).error(function(xhr){
          $('#hierarchyNewPageName').val('');
          if(WebIDE.bootstrap()) {
            $('#hierarchyPageModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          setHierarchyState(xhr.statusText, 4000, 'red');
        });
      });
    },
    /**
     * Add shortcuts when the "page" modal is opened
     */
    _addModalShortcut : function() {
      $('#hierarchyNewPageName').focus();
      shortcut.add("Enter", function() {
        $('#hierarchyAddPage').click();
      });
    },
    /**
     * Set data about the current document edited
     * @input String locale: the value currently used in the editor
     */
    _setCurrentLocale : function(locale) {
      WikiEditor.currentLocale = locale;
    },
    /**
     * Get/set the value of the "hidden" field of the selected page
     * _getHidden/_setHidden
     * @input String space : space of the page
     * @input String page : name of the page
     * @input String locale : language of the page
     * _setHidden
     * @input Int state : 0 = visible, 1 = hidden
     */
    _getHidden : function(space, page, locale) {
      var hiddenState = $('.editPage[data-space="'+space+'"][data-page="'+page+'"][data-locale="'+locale+'"]').attr('data-hidden');
      return hiddenState || '';
    },
    _setHidden : function(space, page, locale, state) {
      var jQueryTabId = '#'+getTabId(WikiEditor.editor, space, page, [locale]);
      var form_token = getDocumentReferenceData('form_token');
      $.ajax({
        url: '/'+XWiki.webapppath+XWiki.servletpath+'save/'+getURLSpacesString(space)+'/'+page+'?language='+locale,
        type: 'POST',
        data: 'form_token='+form_token+'&amp;xhidden='+state,
        success: function() {
          $(jQueryTabId+' .editorWikiHiddenSaved').val(state);
        },
        error: function(xhr) {
          $(jQueryTabId+' .editorWikiHidden').val($(jQueryTabId+' .editorWikiHiddenSaved').val());
        }
      });
    },
    /**
     * Load data about related elements (macros used, includes) of the selected page
     */
    _loadRelatedElements : function(space, page, relatedElementsBlock) {
      $.ajax({
        url : WebIDE.wikiGetURL+"WebIDECode/AddRelatedElements?xpage=plain&amp;space="+encodeURIComponent(space)+"&amp;page="+encodeURIComponent(page)+"&amp;master="+WebIDE.masterSpace+"."+WebIDE.masterPage,
        type : "GET",
        accept: "application/html"
      }).success(function(data) {
        if(data) {
          $(relatedElementsBlock).find('.editorOtherFieldsBlockContent').html(data);
          Hierarchy.init();
        }
        else {
          $(relatedElementsBlock).hide();
        }
      }).error(function(xhr) {
        $(relatedElementsBlock).find('.editorOtherFieldsBlockContent').html('Unable to load related elements: '+xhr.statusText);
      });
    }
  };

  //-------------------------------------
  //--------- Object Editor API ---------
  //-------------------------------------
  /**
   * loadObject()
   * startDisplayObjects(dataContent, urlSpaces, file)
   * loadObjectsDetails(objectsList, index, objectsListSize, oldClass, menuNode, dataNode)
   * endDisplayObjects(objectsListSize)
   * addObject(String className)
   * initObjects()
   * removeObject(String className, Int number)
   * saveObjects(boolean continueEdit)
   */
  //---------- ObjectEditor Module ----------
  /**
   * ----- Internal variables -----
   * currentObject
   *   The class of the object displayed in the current tab
   * currentNumber
   *   The number of the object displayed in the current tab
   * ----- Internal methods -----
   * _addModalShortcut()
   *   Add shortcuts when the "page" modal is opened
   * _setCurrentObject(objName)
   * _setCurrentNumber(objNumber)
   */
  var ObjectEditor = {
    editor : 'object',
    currentObject : '',
    currentNumber : '',
    /**
     * Get the list of object in the current page
     */
    load : function(loadAllTabs) {
      if(WebIDE.currentEditor === ObjectEditor.editor) {
        setLoadingState(true);
        var selectedObjectURL = '';
        if(ObjectEditor._getCurrentObject(false) &amp;&amp; ObjectEditor._getCurrentObject(false) !== 'XWiki.WikiMacroClass') {
          selectedObjectURL = '/'+ObjectEditor._getCurrentObject(false)+'/'+ObjectEditor.currentNumber;
        }
        var restSpaces = getCurrentSpace(false, false, true);
        $.ajax({
          url: '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+restSpaces+'/pages/'+getCurrentPage(false)+'/objects'+selectedObjectURL,
          type: "GET",
          contentType: "application/xml",
        }).success(function(dataContent){
          var tabId = getTabId(ObjectEditor.editor, getCurrentSpace(false), getCurrentPage(false), ObjectEditor.getParameters());
          var jQueryTabId = '#'+tabId;
          // Creation of the list of objects in the page
          if(!ObjectEditor._getCurrentObject(false) || ObjectEditor._getCurrentObject(false) == 'XWiki.WikiMacroClass') {
            if(!ObjectEditor._getCurrentObject(false)) {
              var objectsList = $(dataContent).find('objectSummary');
            }
            else {
              var objectsList = $(dataContent).find('objectSummary').filter(function(i, elmt) {
                return ($(elmt).find('className').text() === 'XWiki.WikiMacroClass' || $(elmt).find('className').text() === 'XWiki.WikiMacroParameterClass');
              });
            }
            objectsList.sort(function(a, b){
              if($(a).find('className').text()&gt;$(b).find('className').text()) return 1;
              else if($(a).find('className').text()&lt;$(b).find('className').text()) return -1;
              else return (parseInt($(a).find('number').text())-parseInt($(b).find('number').text()));
            });
          }
          else {
            var objectsList = $(dataContent).find('object');
          }
          ObjectEditor._startDisplayObjects(jQueryTabId, objectsList, loadAllTabs);
        }).error(function(xhr) {
          setLoadingState(false, xhr.statusText, 4000, 'red');
        });
      }
    },
    /**
     * Start the loading of the object editor. Create the main DOM elements and call the function to continue the loading process.
     * @input String jQueryTabId : id of the div where to put the data
     * @input List objectsList : list of objects to display from XWiki Rest API
     */
    _startDisplayObjects: function(jQueryTabId, objectsList, loadAllTabs) {
      var form_token = getDocumentReferenceData('form_token');
      var currentTabNumber = getTabNumber(jQueryTabId);
      var urlSpaces = getCurrentSpace(false, true);
      var file = getCurrentPage(false);
      var objectsListSize = objectsList.size();
      $(jQueryTabId).html('');
      var menuNode = null;
      var addObjectNode = null;
      // Creation of the page structure
      if(!ObjectEditor._getCurrentObject(false)) {
        menuNode = $('&lt;div id="tab'+currentTabNumber+'_editorObjectMenuContent" class="editorObjectMenuContent"&gt;&lt;/div&gt;').appendTo($('&lt;div id="tab'+currentTabNumber+'_editorObjectMenu" class="editorObjectMenu"&gt;&lt;span id="tab'+currentTabNumber+'_editorObjectMenuTitle" class="editorObjectMenuTitle"&gt;Quick Access&lt;/span&gt;&lt;/div&gt;').appendTo($(jQueryTabId)));
        addObjectNode = $('&lt;div id="tab'+currentTabNumber+'_addObjectBlock" class="addObjectBlock"&gt;&lt;/div&gt;').appendTo($(jQueryTabId));
      }
      var dataNode = $('&lt;form method="post" action="/'+XWiki.webapppath+''+XWiki.servletpath+'save/'+urlSpaces+'/'+file+'" id="tab'+currentTabNumber+'_objectIDEform" class="objectIDEform"&gt;&lt;input type="hidden" name="form_token" value="'+form_token+'" /&gt;&lt;/form&gt;').appendTo($(jQueryTabId));
      if(ObjectEditor._getCurrentObject(false)) {
        initOtherFieldsBlock(dataNode, jQueryTabId, "Advanced fields");
        menuNode = $(jQueryTabId+' .editorOtherFieldsBlockContent');
        if(ObjectEditor._getCurrentObject(false) === 'XWiki.WikiMacroClass') {
          $('&lt;input type="hidden" id="tab'+currentTabNumber+'_addClassList" value="XWiki.WikiMacroParameterClass" /&gt;&lt;button class="btn btn-success" id="tab'+currentTabNumber+'_editorObjectAddButton"&gt;Add a parameter&lt;/button&gt;&lt;button class="btn btn-default" id="tab'+currentTabNumber+'_editorExpandAllButton"&gt;Expand all&lt;/button&gt;&lt;button class="btn btn-default" id="tab'+currentTabNumber+'_editorCollapseAllButton"&gt;Collapse all&lt;/button&gt;&lt;br&gt;').appendTo(menuNode);
        }
        ObjectEditor._loadObjectsDetails(jQueryTabId, objectsList, 0, objectsListSize, '', menuNode, dataNode, null, loadAllTabs);
      }
      else {
        // Add the list which propose the user to add an object from a selected class
        var url = WebIDE.wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;allClasses=1";
        $.ajax({
          url: url,
          type: "GET",
          contentType: "plain/text",
        }).success(function(dataContent){
          var dataContentTmp = $('&lt;div/&gt;').html(dataContent);
          var tabAdd = 'tab'+currentTabNumber+'_';
          fixIds(dataContentTmp, tabAdd);
          addObjectNode.html(dataContentTmp.html());
          // loadObjectsDetails : Add details recursively for each object and call the finalizing function
          ObjectEditor._loadObjectsDetails(jQueryTabId, objectsList, 0, objectsListSize, '', menuNode, dataNode, null, loadAllTabs);
        });
      }
    },
    /**
     * Load details for each object recursively and display them in the page.
     * Call the finilazing function at the end
     * @input String jQueryTabId : id of the div where to put the data
     * @input List objectsList : the list of objects in the page
     * @input Int index : the object to display in the list
     * @input Int objectsListSize : the objects list size
     * @input String oldClass : the class of the previous object displayed
     * @input DOMElements menuNode, dataNode : The element in which object details have to be added
     */
    _loadObjectsDetails : function(jQueryTabId, objectsList, index, objectsListSize, oldClass, menuNode, dataNode, currentClassNode, loadAllTabs) {
      if(objectsListSize == 0) {ObjectEditor._endDisplayObjects(jQueryTabId, objectsListSize);}
      else {
        var currentTabNumber = getTabNumber(jQueryTabId);
        var className = $(objectsList[index]).find('className').text();
        var number = $(objectsList[index]).find('number').text();
        if(className != oldClass &amp;&amp; !ObjectEditor._getCurrentObject(false)) {
          dataNode.append('&lt;h2 class="wikigeneratedheader editorObjectClassTitle" data-classname="'+className+'"&gt;'+className+'&lt;/h2&gt;');
          var currentClassNode = $('&lt;div id="tab'+currentTabNumber+'_editorObjects-'+className+'" class="editorObjectClassDetails"&gt;&lt;/div&gt;').appendTo(dataNode);
        }
        else {
          var currentClassNode = dataNode;
        }
        var isSelectedObject = '';
        if(ObjectEditor._getCurrentObject(false)) {
          isSelectedObject = '&amp;selectedObject';
        }
        var url = WebIDE.wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;docFullName="+getCurrentSpace(true)+'.'+getCurrentPage(true)+'&amp;className='+className+'&amp;number='+number+isSelectedObject;
        $.ajax({
          url: url,
          type: "GET",
          contentType: "plain/text",
        }).success(function(dataContent){
          var dataContentTmp = $('&lt;div/&gt;').html(dataContent);
          var tabAdd = 'tab'+currentTabNumber+'_';
          fixIds(dataContentTmp, tabAdd);
          dataContent = dataContentTmp.html();
          if(ObjectEditor._getCurrentObject(false)) {
            // Display the code field in the main block, and all other fields in the right-hand menu. If there is no code field, the object should be displayed in the main block. If the object is a macro with parameters (objectsListSize &gt; 1), it's parameters should be displayed in the right-hand menu :
            if($(dataContent).find('.editorCodeField').length &gt; 0) {
              $(menuNode).append(dataContent);
              var currentMainBlock = $('&lt;div class="editorDisplayedObject"&gt;&lt;/div&gt;').appendTo(currentClassNode);
              $(menuNode).find('.editorCodeField').detach().appendTo(currentMainBlock);
              $(dataNode).addClass('editorObjectWithCode');
            }
            else if(objectsListSize &gt; 1) {
              $(menuNode).append(dataContent);
            }
            else {
              var currentMainBlock = $('&lt;div class="editorDisplayedObject"&gt;&lt;/div&gt;').appendTo(currentClassNode);
              $(currentMainBlock).append(dataContent);
              if($(menuNode).is(':empty')) {
                $(menuNode).parent().remove();
              }
            }
          }
          else {
            var anchor = $('&lt;div /&gt;').append(dataContent).find('h4').attr('id');
            menuNode.append('&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;&lt;br&gt;');
            currentClassNode.append('&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;');
          }
        }).error(function(xhr) {
          currentClassNode.append('Error while loading object '+className+' '+number+' : '+xhr.statusText+'&lt;br&gt;');
        }).complete(function(xhr) {
          index++;
          if(index &lt; objectsListSize) {ObjectEditor._loadObjectsDetails(jQueryTabId, objectsList, index, objectsListSize, className, menuNode, dataNode, currentClassNode, loadAllTabs);}
          else {ObjectEditor._endDisplayObjects(jQueryTabId, objectsListSize, loadAllTabs);}
        });
      }
    },
    /**
     * Complete the loading of object editor
     * @input String jQueryTabId : id of the div where to put the data
     * @input number of objects in the page
     */
    _endDisplayObjects : function(jQueryTabId, objectsListSize, loadAllTabs) {
      // Initialize the events (click on link/buttons) for all the objects
      ObjectEditor._initEvents(true, jQueryTabId);
      // Objects should be hidden if there are more than 2
      if(objectsListSize &lt; 3) {$(jQueryTabId+' .editorObjectDetails').show();}
      // Start the code mirror instances for objects with a textarea field
      if(WebIDE.syntaxHighlighting) {initCodeMirrorsCustom(ObjectEditor.editor, jQueryTabId);}
      var tabNumberId = getTabNumber(jQueryTabId);
      setSavedContent(tabNumberId);
      setLoadingState(false, 'Loaded', 2500);
      if(loadAllTabs) {
        WebIDE.continueLoadAll();
      }
    },
    /**
     * Initialize the different events related to object editor
     * Show/hide objects with click events
     * Add/Remove objects with click events
     */
    _initEvents : function(allObjects, jQueryTabId){
      var currentTabNumber = getTabNumber(jQueryTabId);

      $(jQueryTabId+' textarea').attr('spellcheck','false');
      $(jQueryTabId+' textarea').attr('autocomplete','off');

      function clickOnClass() {
        var divSelector = 'div[id="tab'+currentTabNumber+'_editorObjects-'+$(this).attr('data-classname')+'"]';
        $(divSelector).toggle();
        // If the textarea was initially hidden, Syntax Highlighting editor will only appear when the user click on the textarea : force the click with jQuery
        $(divSelector+' textarea').click();
      }
      function clickOnObject() {
        var divSelector = 'div[id="tab'+currentTabNumber+'_editorObject-'+$(this).parent().attr('data-classname')+'-'+$(this).parent().attr('data-number')+'"]';
        $(divSelector).toggle();
        // If the textarea was initially hidden, Syntax Highlighting editor will only appear when the user click on the textarea : force the click with jQuery
        $(divSelector+' textarea').click();
      }
      function clickOnMenu(e) {
        $(jQueryTabId+' .editorObjectDetails').hide();
        var divSelector = 'div[id="tab'+currentTabNumber+'_editorObjects-'+$(this).attr('data-classname')+'"]';
        var divSelectorInternal = 'div[id="tab'+currentTabNumber+'_editorObject-'+$(this).attr('data-classname')+'-'+$(this).attr('data-number')+'"]';
        $(divSelector).show();
        $(divSelectorInternal).show();
        $(divSelector+' textarea').click();
      }
      function clickOnRemoveObject(e) {
        e.preventDefault();
        $('#editorDeletedObjectModalInfo').html($(this).attr('data-classname')+' - '+$(this).attr('data-number'));
        $('#editorDeleteObjectConfirmed').attr('data-classname', $(this).attr('data-classname'));
        $('#editorDeleteObjectConfirmed').attr('data-number', $(this).attr('data-number'));
        if(WebIDE.bootstrap()) {
          $('#editorDeleteObjectModal').modal('show');
        }
        else {
          openModalNoBootstrap('#editorDeleteObjectModal');
        }
      }
      $(jQueryTabId+' .editorObjectClassTitle').unbind('click');
      $(jQueryTabId+' .editorObjectTitle h4').unbind('click');
      $(jQueryTabId+' .editorObjectMenuLink').unbind('click');
      $(jQueryTabId+' .editorRemoveObject').unbind('click');
      $(jQueryTabId+' .editorObjectClassTitle').on('click', clickOnClass);
      $(jQueryTabId+' .editorObjectTitle h4').on('click', clickOnObject);
      $(jQueryTabId+' .editorObjectMenuLink').on('click', clickOnMenu);
      $(jQueryTabId+' .editorRemoveObject').on('click', clickOnRemoveObject);

      if(allObjects) { //Executed only when the page is loaded for the first time (not when an object is added)
        // Event : Expand/Collapse objects list
        $('#tab'+currentTabNumber+'_editorExpandAllButton').on('click', function(e) {
          e.preventDefault();
          $(jQueryTabId+' .editorObjectDetails, '+jQueryTabId+' .editorObjectClassDetails').show();
          $(jQueryTabId+' .editorObjectDetails textarea').click();
        });
        $('#tab'+currentTabNumber+'_editorCollapseAllButton').on('click', function(e) {
          e.preventDefault();
          $(jQueryTabId+' .editorObjectClassDetails').show();
          $(jQueryTabId+' .editorObjectDetails').hide();
        });
        // Event : Add an object
        $('#tab'+currentTabNumber+'_editorObjectAddButton').on('click', function(e) {
          e.preventDefault();
          var selectedObj = $('#tab'+currentTabNumber+'_addClassList').val();
          ObjectEditor.add(jQueryTabId, selectedObj);
        });
      }
    },
    /**
     * Save the displayed objects
     * @input String folder: The folder where is located the document to save
     * @input String file: The file whose objects have to be saved
     * @input String objName: name of the object displayed (JSX, SSX, macro) when single-object editor
     * @input String objNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
     * @input Boolean changeSavedContent: true = change the value of savedContent, false = don't change the value, the tab is going to be closed
     * @input Boolean continueEditing: true = stay in the editor, false = go to the view mode of the page after saving
     */
    save : function(tabNumberId, changeSavedContent, continueEditing, saveAll, tokenUpToDate) {
      if(!WebIDE.SAVING || saveAll) {
        if(!saveAll) {
          setSavingState(true, 'Saving...', null, 'green');
        }
        if(WebIDE.syntaxHighlighting) {
          synchronizeCodeMirrorContent();
        }
        $.ajax({
          url: $('#tab'+tabNumberId+'_objectIDEform').attr('action'),
          type: $('#tab'+tabNumberId+'_objectIDEform').attr('method'),
          data: $('#tab'+tabNumberId+'_objectIDEform').serialize(),
          success: function() {
            if(changeSavedContent) {
              setSavedContent(tabNumberId);
            }
            setStar(false, tabNumberId);
            if(!saveAll) {
              setSavingState(false, 'Saved', 2500);
              if(continueEditing) return true;
              else window.location.href = WebIDE.wikiViewURL+space+'/'+page;
            }
            else {
              continueSaveAll(true);
            }
          },
          error: function(xhr) {
            if(!saveAll) {
              setSavingState(false, xhr.statusText, 5000, 'red');
            }
            if(xhr.status == 401 &amp;&amp; !tokenUpToDate){
              ObjectEditor._getUpdatedToken(ObjectEditor.save, [tabNumberId, changeSavedContent, continueEditing, saveAll]);
            }
            else {
              continueSaveAll(false, xhr, folder, file);
            }
          }
        });
      }
    },
    getParameters : function() {
      return [ObjectEditor._getCurrentObject(false), ObjectEditor.currentNumber];
    },
    setParameters : function(parameters) {
      ObjectEditor._setCurrentObject(parameters[0]);
      ObjectEditor._setCurrentNumber(parameters[1]);
    },
    resetParameters : function() {
      ObjectEditor._setCurrentObject(null);
      ObjectEditor._setCurrentNumber(null);
    },
    getTabButtonParameters : function(parameters) {
      return (parameters[0]) ? 'data-object="'+encodeURI(parameters[0])+'" data-objectnumber="'+parameters[1]+'"' : '';
    },
    getParametersFromTab : function(tabButton) {
      var tabObj = tabButton.attr('data-object') || null;
      var tabObjNumber = tabButton.attr('data-objectnumber') || null;
      return [tabObj, tabObjNumber];
    },
    getMenuElement : function(folder, file, parameters) {
      return (parameters[0]) ? $('.editObject[data-space="'+folder+'"][data-page="'+file+'"][data-object="'+parameters[0]+'"][data-objectnumber="'+parameters[1]+'"]') : $('.editObject[data-space="'+folder+'"][data-page="'+file+'"]').not('[data-object]');
    },
    getTabName : function(folder, file, parameters) {
      return (parameters[0]) ? '('+ObjectEditor._getObjectShortName(parameters[0])+') '+file+' ('+decodeURIComponent(folder)+')' : file+' ('+decodeURIComponent(folder)+')';
    },
    /**
     * Get a short name for objects which can be displayed alone (JS, CSS, Macro) to be able to better identified a tab
     * @input String className: The class of the object
     */
    _getObjectShortName : function(className) {
      if(className === 'XWiki.JavaScriptExtension') {
        return 'JSX';
      }
      else if(className === 'XWiki.StyleSheetExtension') {
        return 'SSX';
      }
      else if(className === 'XWiki.WikiMacroClass') {
        return 'Macro';
      }
      else {
        return className || '';
      }
    },
    getCurrentContent : function (tabElement) {
      var arrayVal = ObjectEditor._getObjectInputFields(tabElement);
      var content = "";
      arrayVal.each(function(elemt, index) {
        content += $(index).val();
      });
      return content;
    },
    initCodeMirror : function(id) {
      id = id.replace( /(:|\.|\[|\]|,)/g, "\\$1" );
      initCodeMirror(id+" textarea[name^='XWiki.StyleSheetExtension_'][name$='_code']", 'css');
      initCodeMirror(id+" textarea[name^='XWiki.JavaScriptExtension_'][name$='_code']", 'javascript');
      initCodeMirror(id+" textarea[name^='XWiki.XWikiSkins_'][name$='.css']", 'css');
      initCodeMirror(id+" textarea[name^='XWiki.XWikiSkins_'][name$='.js']", 'javascript');
      initCodeMirror(id+" textarea[name^='XWiki.XWikiSkins_'][name$='.vm']", 'velocity');
      initCodeMirror(id+" textarea[name^='XWiki.WikiMacroClass_'][name$='_code']", XWiki.docsyntax);
      initCodeMirror(id+" textarea[name^='Panels.PanelClass_'][name$='_content']", XWiki.docsyntax);
      initCodeMirror(id+" textarea[name^='XWiki.UIExtensionClass'][name$='_content']", XWiki.docsyntax);
    },
    initHash : function(hashArray) {
      if(hashArray.size() === 7) {
        ObjectEditor.setParameters([decodeURIComponent(hashArray[5]), hashArray[6]]);
      }
    },
    /**
     * Change the effect of the "delete" button at the bottom of the editor to make it delete an object (if single object editor).
     * If the editor is the classic object editor, make the button delete the whole page.
     */
    setDeleteButton : function() {
      if(ObjectEditor._getCurrentObject(false) &amp;&amp; ObjectEditor._getCurrentObject(false) !== 'Panels.PanelClass' &amp;&amp; ObjectEditor._getCurrentObject(false) !== 'XWiki.WikiMacroClass') { // Single object editor : delete only the object displayed in the page
        $('#hierarchyDeleteButtonIDE').val('Delete this object from the page');
        $('#hierarchyDeleteButtonIDE').off('click');
        $('#hierarchyDeleteButtonIDE').on('click', function() {
          $('#editorDeletedObjectModalInfo').html(ObjectEditor._getCurrentObject(false)+' - '+ObjectEditor.currentNumber);
          $('#editorDeleteObjectConfirmed').attr('data-classname', ObjectEditor._getCurrentObject(false));
          $('#editorDeleteObjectConfirmed').attr('data-number', ObjectEditor.currentNumber);
          if(WebIDE.bootstrap()) {
            $('#editorDeleteObjectModal').modal('show');
          }
          else {
            openModalNoBootstrap('#editorDeleteObjectModal');
          }
        });
      }
      else { // Multiple object editor : delete the whole page
        $('#hierarchyDeleteButtonIDE').val('Delete this page from the wiki');
        $('#hierarchyDeleteButtonIDE').off('click');
        $('#hierarchyDeleteButtonIDE').on('click', function() {
          $('#editorDeleteMultipleObjectsModalInfo').html(getCurrentSpace()+'.'+getCurrentPage());
          $('#editorDeleteMultipleObjectsModal').modal('show');
        });
      }
    },
    /**
     * Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy)
     */
    initMenu : function() {
      // Add an existing page (if no bootstrap)
      $('.newLocalObject, .newGlobalObject').off('click');
      $('.newLocalObject, .newGlobalObject').on('click', function(e){
        e.preventDefault();
        var modal = true;
        var folder = $(this).attr('data-space') || '';
        var file = encodeURIComponent($(this).attr('data-page')) || '';
        $('#hierarchyObjectPageInput').attr('disabled', false);
        $('#hierarchyObjectSpace').html(folder);
        $('#hierarchyObjectPageInputDefault').val('');
        $('#hierarchyObjectPageInput').val('');
        $('#hierarchyObjectPage').html('');
        var objType = 'JS';
        var objScope = 'local';

        // Manage the case of each type of object that can be added from the logical view.
        // Cf ObjectEditor.initModals() below to add extras properties to the object, if necessary, when the user validates
        if($(this).hasClass('newJSObject')) {
          $('#hierarchyObjectClassName').val('XWiki.JavaScriptExtension');
        }
        else if($(this).hasClass('newCSSObject')) {
          objType = 'CSS';
          $('#hierarchyObjectClassName').val('XWiki.StyleSheetExtension');
        }
        else if($(this).hasClass('newMacroObject')) {
          objType = 'Macro';
          $('#hierarchyObjectClassName').val('XWiki.WikiMacroClass');
        }
        else if($(this).hasClass('newPanelObject')) {
          objType = 'Panel';
          $('#hierarchyObjectClassName').val('Panels.PanelClass');
        }
        else if($(this).hasClass('newTranslationObject')) {
          objType = 'Translation';
          $('#hierarchyObjectClassName').val('XWiki.TranslationDocumentClass');
        }
        else if($(this).hasClass('newSheet')) {
          objType = 'Sheet';
          $('#hierarchyObjectClassName').val('XWiki.DocumentSheetBinding');
        }
        else if($(this).hasClass('newUIXObject')) {
          objType = 'UI Extension';
          $('#hierarchyObjectPageInput').attr('disabled', true);
          $('#hierarchyObjectClassName').val('XWiki.UIExtensionClass');
        }

        if($(this).hasClass('newGlobalObject')) {
          objScope = 'global';
          $('#hierarchyAddObject').attr('data-scope', 'global');
          $('#hierarchyObjectPageInput').val(file);
          $('#hierarchyObjectPageInputDefault').val(file);
          $('#hierarchyObjectPageBlock').hide();
          $('#hierarchyObjectPageInputBlock').show();
        }
        else if($(this).hasClass('newLocalObject')) {
          // Add the object without modal
          $('#hierarchyAddObject').attr('data-scope', 'local');
          var className = $('#hierarchyObjectClassName').val();
          ObjectEditor.add(null, className, true, folder, file, false, true);
          modal = false;
        }
        $('#hierarchyAddObject').html('Add '+objScope+' '+objType);
        if(!WebIDE.bootstrap() &amp;&amp; modal) {
          openModalNoBootstrap('#hierarchyObjectModal');
          ObjectEditor._addModalShortcut();
        }
      });
      $('.editObject').off('click');
      $('.editObject').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var folder = $(this).attr('data-space');
          var file = $(this).attr('data-page');
          var objectSelected = null;
          var objectNumber = null;
          if($(this).attr('data-object') &amp;&amp; $(this).attr('data-objectnumber')) {
            objectSelected = $(this).attr('data-object');
            objectNumber = $(this).attr('data-objectnumber');
          }
          goToNewPage(ObjectEditor.editor, file, folder, [objectSelected, objectNumber]);
        }
      });
      $('.deleteObject').off('click');
      $('.deleteObject').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var folder = $(this).attr('data-space');
          var file = $(this).attr('data-page');
          var objectSelected = null;
          var objectNumber = null;
          if($(this).attr('data-object') &amp;&amp; $(this).attr('data-objectnumber')) {
            objectSelected = $(this).attr('data-object');
            objectNumber = $(this).attr('data-objectnumber');
            $('#editorDeletedObjectModalInfo').html(objectSelected+' - '+objectNumber);
            $('#editorDeleteObjectConfirmed').attr('data-classname', objectSelected);
            $('#editorDeleteObjectConfirmed').attr('data-number', objectNumber);
            $('#editorDeleteObjectConfirmed').attr('data-space', folder);
            $('#editorDeleteObjectConfirmed').attr('data-page', file);
            if(WebIDE.bootstrap()) {
              $('#editorDeleteObjectModal').modal('show');
            }
            else {
              openModalNoBootstrap('#editorDeleteObjectModal');
            }
          }
        }
      });
    },
    /**
     * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
     */
    initModals : function() {
      $('#hierarchyObjectModal').on('shown.bs.modal', ObjectEditor._addModalShortcut);
      $('#hierarchyObjectModal').on('hidden.bs.modal', removeEnterShortcut);
      $('#hierarchyAddObject').click(function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        // Get page and object data
        var folder = $('#hierarchyObjectSpace').html();
        var file = !$('#hierarchyObjectPage').is(':empty') ? $('#hierarchyObjectPage').html() : ($('#hierarchyObjectPageInput').val() !== '' ?  $('#hierarchyObjectPageInput').val() : $('#hierarchyObjectPageInputDefault').val());
        var className = $('#hierarchyObjectClassName').val();
        if(folder &amp;&amp; file &amp;&amp; className &amp;&amp; folder.trim() &amp;&amp; file.trim() &amp;&amp; className.trim()) {
          var global = ($('#hierarchyAddObject').attr('data-scope') === 'global');
          var properties = null;
          var redirect = true;
          // Manage the different types of object that can be added from the logical view
          if(global &amp;&amp; className === 'XWiki.JavaScriptExtension') {
            properties = encodeURIComponent('{"name" : "'+file.replace(/"/g, '\"')+'"}');
            file = 'JS';
          }
          else if(global &amp;&amp; className === 'XWiki.StyleSheetExtension') {
            properties = encodeURIComponent('{"name" : "'+file.replace(/"/g, '\"')+'"}');
            file = 'CSS';
          }
          else if(global &amp;&amp; className === 'XWiki.WikiMacroClass') {
            var macroName = file.charAt(0).toLowerCase() + file.slice(1);
            properties = encodeURIComponent('{"id" : "'+macroName.replace(/"/g, '\"')+'", "name" : "'+file.replace(/"/g, '\"')+'"}');
            file = fixName(file, 'macros');
          }
          else if(global &amp;&amp; className === 'XWiki.TranslationDocumentClass') {
            properties = encodeURIComponent('{"scope" : "WIKI"}');
            redirect = false; // Translation must be opened by the wiki editor
          }
          else if(global &amp;&amp; className === 'XWiki.UIExtensionClass') {
            file = 'UIX';
          }
          // Add the object
          ObjectEditor.add(null, className, true, folder, file, global, redirect, properties);
        }
        else {
          $('#hierarchyObjectModalError').html('ERROR : You have to fill all the fields!').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        }
      });
      $('#editorDeleteObjectConfirmed').click(function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        var page = $(this).attr('data-page') || getCurrentPage(false);
        var space = $(this).attr('data-space') || getCurrentSpace(false);
        ObjectEditor.remove(space, page, $(this).attr('data-classname'), $(this).attr('data-number'));
        $(this).removeAttr('data-page');
        $(this).removeAttr('data-space');
        $(this).removeAttr('data-classname');
        $(this).removeAttr('data-number');
      });
      $('#editorDeleteMultipleObjectConfirmed').on('click', function(e) {
        $('body').removeClass('modal-open');
        e.preventDefault();
        var page = getCurrentPage(false);
        var space = getCurrentSpace(false);
        ObjectEditor.remove(space, page);
      });
    },
    _getCurrentObject : function(escaped) {
      if(escaped) {return (ObjectEditor.currentObject === null) ? null : getEscapedValue(ObjectEditor.currentObject);}
      else {return ObjectEditor.currentObject;}
    },
    _addModalShortcut : function() {
      $('#hierarchyObjectPageInput').focus();
      shortcut.add("Enter", function() {
        $('#hierarchyAddObject').click();
      });
    },
    /**
     * Add the selected object to the page
     * @input String jQueryTabId : id of the div where to put the data
     * @input String className : class of the object to add
     */
    add : function(jQueryTabId, className, newTab, space, page, global, redirect, properties, type) {
      if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
        setSavingState(true);
        setLoadingState(true);
        var objPage = page || getCurrentPage(true);
        var objSpace = space || getCurrentSpace(true);
        var isSelectedObject = '';
        var isGlobal = '';
        var addProperties = '';
        if(!newTab) {
          var currentTabNumber = getTabNumber(jQueryTabId);
          var unsavedStateBefore = (WebIDESavedContent[currentTabNumber] !== getCurrentContent(currentTabNumber));
        }
        if(ObjectEditor._getCurrentObject(false) || newTab) {
          isSelectedObject = '&amp;selectedObject';
        }
        if(global) {
          isGlobal = '&amp;isGlobal';
        }
        if(properties) {
          addProperties = '&amp;properties='+properties;
        }
        if(className != "") {
          $.ajax({
            url: WebIDE.wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;addObject="+className+"&amp;docFullName="+objSpace+'.'+objPage+isSelectedObject+isGlobal+addProperties,
            type: "GET",
            dataType: "html"
          }).error(function(xhr) {
            setSavingState(false, 'Unable to add object: '+xhr.statusText, 4000, 'red');
          }).success(function(dataContent) {
            setSavingState(false, 'Saved', 2500);
            var number = $('&lt;div/&gt;').append(dataContent).find('div[data-number]').attr('data-number');
            if(newTab) { // Add an object from the menu
              setLoadingState(false, 'Loaded', 2500);
              if(redirect) { // Create an object and redirect to a new tab with that object
                goToNewPage(ObjectEditor.editor, page, space, [className, number]);
              }
              Hierarchy.reload();
            }
            else { // Add an object from an object editor tab
              var divSelector = 'div[id="tab'+currentTabNumber+'_editorObjects-'+className+'"]';
              var dataContentTmp = $('&lt;div/&gt;').html(dataContent);
              var tabAdd = 'tab'+currentTabNumber+'_';
              fixIds(dataContentTmp, tabAdd);
              dataContent = dataContentTmp.html();
              var anchor = $('&lt;div /&gt;').append(dataContent).find('h4').attr('id');
              var newObjectId = '#tab'+currentTabNumber+'_editorObject-'+className+'-'+number;
              if(ObjectEditor._getCurrentObject(false)) { // Single object editor : add in the "other fields" block (e.g. : macro parameters)
                $(jQueryTabId+' .editorOtherFieldsBlock').append(dataContent);
                // Collapse the existing parameters/fields and expand only the new object
                $(jQueryTabId+' .editorObjectDetails').hide();
                $(jQueryTabId+' .editorObjectDetails:last').show();
              }
              else { // Classic object editor
                // Add the object in the right class if an object of that class is already in that page
                if($(divSelector).length){
                  $(divSelector).show();
                  $(divSelector).append('&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;');
                }
                // Else add the object at the end of the page and quick access menu
                else {
                  $('#tab'+currentTabNumber+'_objectIDEform').append('&lt;h2 class="wikigeneratedheader editorObjectClassTitle" data-classname="'+className+'"&gt;'+className+'&lt;/h2&gt;&lt;div id="tab'+currentTabNumber+'_editorObjects-'+className+'" class="editorObjectClassDetails"&gt;&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;&lt;/div&gt;');
                }
                // Add the shortcut in the Quick Access Menu
                if($('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"]:last').length) {
                  $('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"]:last').after('&lt;br&gt;&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
                }
                else if($('#tab'+currentTabNumber+'_editorObjectMenu a:last').length) {
                  $('#tab'+currentTabNumber+'_editorObjectMenu a:last').after('&lt;br&gt;&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
                }
                else {
                  $('#tab'+currentTabNumber+'_editorObjectMenuContent').append('&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
                }
              }
              ObjectEditor._initEvents(false, jQueryTabId);
              if(WebIDE.syntaxHighlighting) {
                initCodeMirrorsCustom(ObjectEditor.editor, newObjectId);
              }
            }
          }).complete(function() {
            $('#hierarchyObjectModal').modal('hide');
            $('#hierarchyPageModal').modal('hide');
            // If all the content was initially saved, update the new "savedContent" value (the new object is automatically saved)
            if(!newTab &amp;&amp; !unsavedStateBefore) {
              setSavedContent(currentTabNumber);
            }
            var unsavedState = (WebIDESavedContent[currentTabNumber] !== getCurrentContent(currentTabNumber));
            setStar(unsavedState, currentTabNumber);
            setLoadingState(false, 'Complete', 2500);
          });
        }
      }
    },
    /**
     * Remove the specified object from the page
     * @input String className: the class of the object to remove
     * @input String number: the number of the object to remove
     */
    remove : function(space, page, className, number) {
      if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
        setSavingState(true, 'Deleting object...');
        setLoadingState(true, 'Removing text...');
        // Find the current tab number
        var jQueryTabId = '#'+getTabId(ObjectEditor.editor, getCurrentSpace(), getCurrentPage(), ObjectEditor.getParameters());
        var currentTabNumber = getTabNumber(jQueryTabId);
        // Check if the deleted element is opened in another tab and find the related tab number.
        // If className == undefined, the users wants to delete the whole current page and so the related tab number is the current tab number. (Prevent issues with macros and panels)
        var jQueryTabIdObj = '#'+getTabId(ObjectEditor.editor, space, page, [className, number]);
        var objectTabNumber = (!className) ? currentTabNumber : getTabNumber(jQueryTabIdObj);
        // Check if the tab was saved before removing the object (the savedContent value will have to be updated at the end if that's the case)
        var unsavedStateBefore = (WebIDESavedContent[currentTabNumber] !== getCurrentContent(currentTabNumber));
        // Determine if the object deleted is in the tab (multiple or single object editor)
        var isCurrentSingleObject = (ObjectEditor._getCurrentObject(false) &amp;&amp; currentTabNumber&gt;0 &amp;&amp; currentTabNumber === objectTabNumber);
        var isInCurrentTab = (isCurrentSingleObject || (WebIDE.currentEditor === ObjectEditor.editor &amp;&amp; page === getCurrentPage() &amp;&amp; space === getCurrentSpace() &amp;&amp; !ObjectEditor._getCurrentObject(false)));
        // Ajax queyr data
        var restCurrentSpaces = getRestSpacesString(space);
        var ajaxUrl = '';
        var httpMethod = '';
        if(!className) { // Remove the whole page from the wiki (Multiple object editor, Panels, Macros...)
          ajaxUrl = WebIDE.wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;removePage=1&amp;docSpace="+space+'&amp;docPage='+page;
          httpMethod = "GET";
        }
        else { // Remvoe only one object from the page
          ajaxUrl = '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+restCurrentSpaces+'/pages/'+page+'/objects/'+className+'/'+number;
          httpMethod = "DELETE";
        }
        $.ajax({
          url: ajaxUrl,
          type: httpMethod,
        }).success(function(dataContent){
          setSavingState(false, 'Deleted', 2500);
          // Case 1: object editor of the concerned page = remove the object from the current tab
          if(isInCurrentTab &amp;&amp; !isCurrentSingleObject &amp;&amp; className) { // Current tab + Current Multiple Objects editor + Only 1 object removed
            var divSelectorInternal = 'div[id="tab'+currentTabNumber+'_editorObject-'+className+'-'+number+'"]';
            $(divSelectorInternal).parent().remove();
            $('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"][data-number="'+number+'"]').next('br').remove();
            $('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"][data-number="'+number+'"]').remove();
            $('#hierarchySavingState').html('&lt;strong&gt;Deleted&lt;/strong&gt;').show().delay(2500).queue(function(n) {
              $(this).hide().html('');
              n();
            });
            Hierarchy.reload();
          }
          // Case 2: object not displayed in the current tab or tab with that object only = remove the tab
          else {
            if(objectTabNumber &gt; 0) {
              var element = $('.editorTabButton[data-tabnumber="'+objectTabNumber+'"]');
              removeTab(element, objectTabNumber);
            }
            Hierarchy.reload();
          }
          if(WebIDE.bootstrap()) {
            $('#editorDeleteObjectModal').modal('hide');
            $('#editorDeleteMultipleObjectsModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
        }).error(function(xhr){
          setSavingState(true, xhr.statusText, 5000, 'red');
        }).complete(function() {
          $('#editorDeletedObjectModalInfo').html('');
          if(isInCurrentTab &amp;&amp; !isCurrentSingleObject &amp;&amp; className) {
            // If all the content was initially saved, update the new "saved" value (the removed object is automatically saved)
            if(!unsavedStateBefore) {
              setSavedContent(currentTabNumber);
            }
            var unsavedState = (WebIDESavedContent[currentTabNumber] !== getCurrentContent(currentTabNumber));
            setStar(unsavedState, currentTabNumber);
          }
          setLoadingState(false, 'Removed', 2500);
        });
      }
    },
    /**
     * Update the CSRF token for the current user (the token can be wrong if the wiki has been restarted)
     * @input (opt) Function callback : the function to call when the token is updated
     * @input (opt) Array args : the arguments to apply to the callback function when it is called
     */
    _getUpdatedToken : function(callback, args) {
      if(!WebIDE.LOADING) {
        setLoadingState(true, 'Updating CSRF token...');
        $.ajax({
          url: WebIDE.wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;updateToken",
          type: "GET",
          dataType: "html"
        }).success(function(dataContent) {
          var newToken = $('&lt;div /&gt;').append(dataContent).find('#currentToken p').html();
          if(newToken !== getDocumentReferenceData('form_token')) {
            if(xm) {
              xm.form_token = newToken;
            }
            else {
              $('meta[name="form_token"]').attr('content', newToken);
            }
            $('input[name="form_token"]').val(newToken);
            setLoadingState(false, 'CSRF token updated!', 2500);
            if(callback &amp;&amp; args) {
              args.push(true);
              callback.apply(null, args);
            }
          }
          else {
            setLoadingState(false, 'Token already up-to-date', 1000);
          }
        }).error(function(xhr) {
          setLoadingState(false, xhr.statusText, 4000, 'red');
        });
      }
    },
    /**
     * Get all the inputs (input, textarea, select, etc.) in the object editor, except those created by CodeMirror
     * @input DOM tabElement: a div element containing the data of a tab
     * @return List[DOM elements] The list of editable elements in the selected object editor tab
     */
    _getObjectInputFields : function(tabElement) {
      return $(tabElement).find('.editorDisplayedObject textarea, .editorDisplayedObject input, .editorDisplayedObject select').not('.CodeMirror textarea')
    },
    /**
     * Set data about the current document edited
     * @input String file/folder/objName/objNumber: the value currently used in the editor
     */
    _setCurrentObject : function(objName) {
      ObjectEditor.currentObject = objName;
    },
    _setCurrentNumber : function(objNumber) {
      ObjectEditor.currentNumber = objNumber;
    }
  };

  //---------- ClassEditor Module ----------
  var AWMClassEditor = {
    editor : 'awm',
    load : function(loadAllTabs) {
      if(WebIDE.currentEditor === AWMClassEditor.editor) {
        setLoadingState(true);
        var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), AWMClassEditor.getParameters());
        var jQueryTabId = '#'+tabId;
        var tabNumberId = getTabNumber(jQueryTabId);
        initOtherFieldsBlock($(jQueryTabId), jQueryTabId, "Advanced fields");
        var advancedFieldBlock = $(jQueryTabId+' .editorOtherFieldsBlockContent');
        var classEditorStorage = window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.classEditor'] || 'basic';
        classEditorStorage = (classEditorStorage === 'advanced') ? 'advanced' : 'basic';
        var urlIframe = (classEditorStorage === 'basic') ? "/xwiki/bin/edit/"+getCurrentSpace(false)+"/"+getCurrentPage(false)+"?editor=inline&amp;sheet=AppWithinMinutes.ClassEditSheet" : "/xwiki/bin/edit/"+getCurrentSpace(false)+"/"+getCurrentPage(false)+"?editor=class";
        AWMClassEditor.iFrameLoading = true;
        var ifrm = $('&lt;iframe allowtransparency="true" id="tab'+tabNumberId+'_awm" data-type="'+classEditorStorage+'" name="tab'+tabNumberId+'_awm" class="editorIframe"/&gt;').attr('src', urlIframe).appendTo($('&lt;div class="editorClassTabContent"&gt;&lt;/div&gt;').appendTo(jQueryTabId));
        AWMClassEditor._initIframe(ifrm, tabNumberId);
        var nextEditor = 'advanced';
        if(classEditorStorage === 'advanced') nextEditor = 'basic';
        $('&lt;input type="button" class="btn btn-default editorAWMSwitch" value="Switch to '+nextEditor+' editor"/&gt;').appendTo(advancedFieldBlock).on('click', function() {
          if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {$('#editorSwitchClassModal').modal('show');}
          else{AWMClassEditor._switchClassEditor(ifrm, tabNumberId);}
        });
        setLoadingState(false, 'Loaded', 2500);
        if(loadAllTabs) {
          WebIDE.continueLoadAll();
        }
      }
    },
    _switchClassEditor : function(ifrm, tabNumberId) {
      if(!AWMClassEditor.iFrameLoading) {
        var oldType = $(ifrm).attr('data-type');
        var tabDiv = $('.editorTab[data-tabnumber="'+tabNumberId+'"]');
        AWMClassEditor.iFrameLoading = true;
        if(oldType === 'basic') {
          $(ifrm).attr('src', "/xwiki/bin/edit/"+getCurrentSpace(false)+"/"+getCurrentPage(false)+"?editor=class")
          $(ifrm).attr('data-type', 'advanced');
          window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.classEditor'] = 'advanced';
        }
        else {
          $(ifrm).attr('src', "/xwiki/bin/edit/"+getCurrentSpace(false)+"/"+getCurrentPage(false)+"?editor=inline&amp;sheet=AppWithinMinutes.ClassEditSheet")
          $(ifrm).attr('data-type', 'basic');
          window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.classEditor'] = 'basic';
        }
        $(tabDiv).find('.editorAWMSwitch').val('Switch to '+oldType+' editor');
        AWMClassEditor._initIframe(ifrm, tabNumberId);
      }
    },
    save : function(tabNumberId, changeSavedContent, continueEditing, saveAll) {
      if(!WebIDE.SAVING || saveAll) {
        var tabButtonElement = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
        var page = decodeURIComponent($(tabButtonElement).attr('data-page'));
        var space = decodeURIComponent($(tabButtonElement).attr('data-space'));
        var tabId = getTabId(WebIDE.currentEditor, space, page, []);
        var jQueryTabId = '#'+tabId;
        var ifrm = $(jQueryTabId+' iframe');
        $(ifrm).contents().find('input[name="xaction_saveandcontinue"], input[name="action_saveandcontinue"]').click();
        if(changeSavedContent) {
          setSavedContent(tabNumberId);
        }
        setStar(false, tabNumberId);
        if(!saveAll) {
          //setSavingState(false, 'Saved', 2500);
          if(continueEditing) return true;
          else window.location.href = WebIDE.wikiViewURL+space+'/'+page;
        }
        else {
          continueSaveAll(true);
        }
      }
    },
    getParameters : function() {
      return [];
    },
    setParameters : function(parameters) {
      return true;
    },
    resetParameters : function() {
      return true;
    },
    getTabButtonParameters : function(parameters) {
      return '';
    },
    getParametersFromTab : function(tabButton) {
      return [];
    },
    getMenuElement : function(folder, file, parameters) {
      return $('.editAWM[data-space="'+folder+'"][data-page="'+file+'"]')
    },
    getTabName : function(folder, file, parameters) {
      return file+' ('+folder+'.'+file+')';
    },
    getCurrentContent : function (tabElement) {
      var arrayVal = AWMClassEditor._getObjectInputFields(tabElement);
      var content = "";
      arrayVal.each(function(elemt, index) {
        content += $(index).val();
      });
      return content;
    },
    initCodeMirror : function(tabId) {
      return true;
    },
    initHash : function(hashArray) {
      return true;
    },
    setDeleteButton : function() {
      $('#hierarchyDeleteButtonIDE').val('Delete this class from XWiki');
      $('#hierarchyDeleteButtonIDE').off('click');
      $('#hierarchyDeleteButtonIDE').on('click', function() {
        $('#editorDeletedClassModalInfo').html(getCurrentSpace(false)+' - '+getCurrentPage(false));
        $('#editorDeleteClassConfirmed').attr('data-page', getCurrentPage(false));
        $('#editorDeleteClassConfirmed').attr('data-space', getCurrentSpace(false));
        if(WebIDE.bootstrap()) {
          $('#editorDeleteClassModal').modal('show');
        }
        else {
          openModalNoBootstrap('#editorDeleteClassModal');
        }
      });
    },
    /**
     * Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy) :
     */
    initMenu : function() {
      // User wants to edit a new page
      $('.editAWM').off('click');
      $('.editAWM').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var folder = $(this).attr('data-space');
          var file = $(this).attr('data-page');
          goToNewPage(AWMClassEditor.editor, file, folder, []);
        }
      });
      $('.newAWMClass').off('click');
      $('.newAWMClass').on('click', function(e){
        e.preventDefault();
        $('#hierarchyAddSheetBlock').hide();
        var folder = $(this).attr('data-space') || '';
        var file = $(this).attr('data-page') || '';
        file = encodeURIComponent(file);

        $('#hierarchyClassSpace').html(folder);
        $('#hierarchyClassInput').val('');

        if($(this).hasClass('newClass')) {
          $('#hierarchyAddClass').attr('data-type', 'class');
        }
        else if($(this).hasClass('newSheet')) {
          $('#hierarchyAddSheetBlock').show();
          $('#hierarchyClassSheet').val('');
          var classFile = file; // e.g.: ApplicationClass
          file = file.substr(0, file.length - 5); // e.g.: Application
          $('#hierarchyClassInput').val(file+"Sheet");
          $('#hierarchyAddClass').attr('data-type', 'sheet');
          $('#hierarchyAddClass').attr('data-classname', classFile);
          $('#hierarchyClassSheet').on('change', function() {
            var action = $(this).val();
            var actionName = (action === '') ? '' : action.charAt(0).toUpperCase() + action.slice(1);
            $('#hierarchyClassInput').val(file+actionName+"Sheet");
          });
        }
        else if($(this).hasClass('newTemplate')) {
          var classFile = folder+'.'+file;
          AWMClassEditor.add(classFile, 'template');
        }
      });
      // User wants to delete a class
      $('.deleteAWM').off('click');
      $('.deleteAWM').on('click', function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var folder = $(this).attr('data-space');
          var file = $(this).attr('data-page');
          $('#editorDeletedClassModalInfo').html(folder+'.'+file);
          $('#editorDeleteClassConfirmed').attr('data-page', file);
          $('#editorDeleteClassConfirmed').attr('data-space', folder);
          if(WebIDE.bootstrap()) {
            $('#editorDeleteClassModal').modal('show');
          }
          else {
            openModalNoBootstrap('#editorDeleteClassModal');
          }
        }
      });
    },
   /**
    * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
    */
    initModals : function() {
      $('#hierarchyAddClass').on('click', function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        var folder = $('#hierarchyClassSpace').text();
        var file = encodeURIComponent($('#hierarchyClassInput').val());
        var sheetName;
        var sheetType;
        var className;
        var type; // Check if it is a class or a sheet:
        if($(this).attr('data-type')) {
            type = $('#hierarchyAddClass').attr('data-type');
          }
        if(folder &amp;&amp; file &amp;&amp; type &amp;&amp; folder.trim() &amp;&amp; file.trim()) {
          if(type === 'sheet') {
            className = folder+'.'+$('#hierarchyAddClass').attr('data-className');
            sheetName = file;
            sheetType = $('#hierarchyClassSheet').val();
          }
          else if(type === 'class') {
            file = fixName(file, type);
            className = folder+'.'+file;
          }
          AWMClassEditor.add(className, type, sheetType, sheetName);
        }
        else {
          $('#hierarchyClassModalError').html('ERROR : You have to fill all the fields!').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        }
      });
      $('#hierarchySaveAndSwitchClassModal, #hierarchyDiscardAndAndSwitchClassModal').click(function(e){
        e.preventDefault();
        if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
          var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(), getCurrentPage(), AWMClassEditor.getParameters());
          var jQueryTabId = '#'+tabId;
          var ifrm = $(jQueryTabId+' iframe');
          var tabNumberId = getTabNumber(jQueryTabId);
          $('body').removeClass('modal-open');
          $('#editorSwitchClassModal').modal('hide');
          if($(this).attr('id') === 'hierarchySaveAndSwitchClassModal') {
            AWMClassEditor.switchEditor = true;
            Modules[AWMClassEditor.editor].save(tabNumberId, false, true, false);
          }
          else {
            AWMClassEditor._switchClassEditor(ifrm, tabNumberId);
          }
        }
      });
      $('#editorDeleteClassConfirmed').click(function(e){
        $('body').removeClass('modal-open');
        e.preventDefault();
        var removeSheet = $('#editorDeleteClassSheet').is(':checked');
        var removeTemplate = $('#editorDeleteClassTemplate').is(':checked');
        AWMClassEditor.remove($(this).attr('data-space'), $(this).attr('data-page'), removeSheet, removeTemplate);
      });
    },
   /**
    * Delete a class from the wiki :
    */
    remove : function(space, page, removeSheet, removeTemplate) {
      if(!WebIDE.LOADING) {
        setLoadingState(true, 'Deleting...');
        var addRemoveSheet = '';
        var addRemoveTemplate = '';
        if(removeSheet) {
          addRemoveSheet = '&amp;removeSheet=1';
        }
        if(removeTemplate) {
          addRemoveTemplate = '&amp;removeTemplate=1';
        }
        $.ajax({
          url: WebIDE.wikiViewURL+"WebIDECode/ClassCreation?outputSyntax=plain&amp;xpage=plain&amp;removeClass=1&amp;space="+space+"&amp;page="+page+""+addRemoveSheet+addRemoveTemplate,
          type: "GET",
          contentType: "application/json",
        }).success(function(data){
          var dataJson = $.parseJSON(data);
          $(dataJson.delete).each(function(index, elmt){
            var selector = '_'+encodeURIComponent(elmt.space).replace(/\./g, '2E').replace(/%/g, '')+'_'+encodeURIComponent(elmt.name).replace(/\./g, '2E').replace(/%/g, '');
            var elements = $('.editorTab[id*="'+selector+'"]');
            elements.each(function(i, innerElmt) {
              var tabNumberId = $(innerElmt).attr('data-tabnumber');
              var element = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
              removeTab(element, tabNumberId);
            });
          });
          $('#editorDeleteClassModal').modal('hide');
          Hierarchy.reload();
          setLoadingState(false, 'Deleted', 2500);
        }).error(function(xhr){
          setLoadingState(false, 'Error: '+xhr.statusText, 4000, 'red');
        });
      }
    },
   /**
    * Add a clas in the project :
    */
    add : function(className, type, sheetType, sheetName) {
      if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
        setSavingState(true);
        if(className &amp;&amp; className != "") {
          var error = 0;
          var addSheetParameters = '';
          if((sheetType || sheetType === '') &amp;&amp; sheetName) {
            addSheetParameters = '&amp;sheetType='+sheetType+'&amp;sheetName='+sheetName;
          }
          $.ajax({
            url: WebIDE.wikiViewURL+"WebIDECode/ClassCreation?xpage=plain&amp;className="+className+"&amp;type="+type+addSheetParameters,
            type: "GET"
          }).error(function(xhr) {
            setSavingState(false, 'Unable to add '+type+': '+xhr.statusText, 4000, 'red');
          }).success(function(dataContent) {
            error = $('&lt;div/&gt;').append(dataContent).find('#editorAddClassError').length;
            if(error) {
              $('#hierarchyClassModalError').html('ERROR : A page with the same name already exist').show().delay(4000).queue(function(n) {
                $(this).hide().html('');
                n();
              });
              setSavingState(false, 'Unable to add '+type+': Existing name', 4000, 'red');
            }
            else {
              setSavingState(false, 'Saved', 2500);
              Hierarchy.reload();
            }
          }).complete(function() {
            if(!error) {
              $('#hierarchyClassModal').modal('hide');
            }
          });
        }
      }
    },
    _initIframe : function(ifrm,tabNumberId) {
      $(ifrm).off('load');
      $(ifrm).on('load', function() {
        // Hide some UI elements from the iframe and show only the main edit area
        $(ifrm).contents().find('body').css({"overflow" : "hidden", "min-height":"300px"});
        $(ifrm).contents().find('body').addClass('main');
        $(ifrm).contents().find('#menuview, #rightPanels, #leftPanels, .bottombuttons, #hierarchy, #footerglobal, .row').hide();
        $(ifrm).contents().find('#classname').parent().remove();
        $(ifrm).contents().find('#options').find('#updateClassSheet, #updateClassTranslations').attr('checked', false); // Basic mode only
        $(ifrm).contents().find('.switch-xclass, .xclass-title, #editPanels').hide(); // Advanced mode only
        $(ifrm).contents().find('div.main').css({
          "left" : "0%",
          "width" : "100%",
          "box-shadow" : "none",
          "padding" : "0px"
        });
        var initIframeHeight = $(ifrm).contents().find('body').height();
        $(ifrm).css({
          "height" : initIframeHeight+"px"
        });
        onElementHeightChange(document.getElementById('tab'+tabNumberId+'_awm').contentDocument.body, function() {
          $(ifrm).css({
            "height" : $(ifrm).contents().find('body').height()+"px"
          });
        });
        // Remove the iframe's keyboard shortcuts to prevent the user from browsing the wiki in the iframe. Keep only Save&amp;Continue (Alt+Shift+S)
        window.setTimeout(function() {
          for (binding in document.getElementById('tab'+tabNumberId+'_awm').contentWindow.shortcut.all_shortcuts) {
            document.getElementById('tab'+tabNumberId+'_awm').contentWindow.shortcut.remove(binding);
          }
          document.getElementById('tab'+tabNumberId+'_awm').contentWindow.shortcut.add("Alt+Shift+S", function() {
            $('#hierarchySaveButtonIDE').click();
          });
        }, 250);
        // Capture the save/saved events to display the notifications in the WebIDE
        // Hide the default notification container (in the iframe)
        $('#tab'+tabNumberId+'_awm').contents().find('body').on('DOMNodeInserted', function(e) {
          $(ifrm).contents().find('.xnotification-container').css({
            "visibility" : "hidden"
          });
        });
        document.getElementById('tab'+tabNumberId+'_awm').contentDocument.observe("xwiki:actions:save", function(event){
          setSavingState(true);
        });
        document.getElementById('tab'+tabNumberId+'_awm').contentDocument.observe("xwiki:document:saved", function(event){
          if(AWMClassEditor.switchEditor) {
            AWMClassEditor.switchEditor = false;
            AWMClassEditor._switchClassEditor(ifrm, tabNumberId);
          }
          setSavingState(false, 'Saved', 2500);
        });
        $(ifrm).contents().find('form#inline').find('input:first').click();
        window.setTimeout(function() {
          setSavedContent(tabNumberId);
          $(ifrm).contents().find('body').on('click keyup', function(){
            var unsavedState = (WebIDESavedContent[tabNumberId] !== getCurrentContent(tabNumberId));
            setStar(unsavedState, tabNumberId);
          });
          AWMClassEditor.iFrameLoading = false;
        }, 500);
        return false;
      });
    },
    switchEditor : false,
    iFrameLoading : false,
    /**
     * Get all the inputs (input, textarea, select, etc.) in the object editor, except those created by CodeMirror
     * @input DOM tabElement: a div element containing the data of a tab
     * @return List[DOM elements] The list of editable elements in the selected object editor tab
     */
    _getObjectInputFields : function(tabElement) {
      var tabNumberId = $(tabElement).attr('data-tabnumber');
      var ifrm = document.getElementById('tab'+tabNumberId+'_awm');
      if($(ifrm).contents().find('#propupdate').length) { // Advanced
        return $(ifrm).contents().find('form#propupdate').find('textarea, input, select')
      }
      else {
        return $(ifrm).contents().find('form#inline').find('textarea[name^="field-"], input[name^="field-"], select[name^="field-"], textarea[name^="'+getCurrentSpace()+'."], input[name^="'+getCurrentSpace()+'."]')
      }
    }
  };

  // Modules
  var Modules = {
    'wiki' : WikiEditor,
    'object' : ObjectEditor,
    'awm' : AWMClassEditor
    //'view' : ViewEditor
  };
  var WebIDE = {
    currentSpace : '',
    currentPage : '',
    masterSpace : '',
    masterPage : '',
    currentTree : '',
    currentEditor : '',
    syntaxHighlightingState : function() { //Is SyntaxHighlighting loaded yet?
      return ($('#syntaxHState').val() === 'new') ? true : (typeof(CodeMirror) !== 'undefined');
    },
    syntaxHighlighting : ($('#syntaxHState').val() === 'new' || $('#syntaxHState').val() === 'old') ? true : false, //Is SyntaxHighlighting installed?
    SAVING : false,
    LOADING : false,
    NESTED_SPACES : checkNestedSpaces(),
    TAB_MAIN_CONTAINER : '#contentMainBlock',
    nextTabToClose : null,
    tabCount : 0, //Number of tab created since the page is loaded
    saveAllList : [],
    savedAll : -1,
    savedAllError : [],
    bootstrap : function() { // Determine if bootstrap is enabled or not for modals
      return (typeof($.fn.modal) !== 'undefined');
    },
    visibleSpaces : [], //Change in Hierarchy.init() when the user expands/collapses the menu
    visiblePages : [], //Same
    visibleCategory : [], //Same
    wikiGetURL : '',
    wikiViewURL : '',
    ssxUrl : '',
    loadList : [],
    fullscreen : false,
    restorePreviousSession : function() {
      // Open all tabs from last session
      var openedTabs = window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.tabs'];
      if(openedTabs) {
        var tabsArray = openedTabs.split(',');
        for(var index = 0; index &lt; tabsArray.length; index++) {
          var tab = decodeURIComponent(tabsArray[index]).split(',');
          var tabEditor = decodeURIComponent(tab[0]);
          var tabSpace = decodeURIComponent(tab[1]);
          var tabPage = decodeURIComponent(tab[2]);
          var tabParameters = decodeURIComponent(tab[3]).split(',');
          WebIDE.loadList.push([tabEditor, tabSpace, tabPage, tabParameters]);
        }
      }
      // Initialize the first tab to display
      if(WebIDE.currentEditor === 'class') {
        setActiveTab('class', getCurrentPage(false), getCurrentSpace(false), []);
      }
      else if(WebIDE.currentEditor === "view" &amp;&amp; WebIDE.loadList.length === 0) {
        initViewEditor();
        setActiveTab('view', getCurrentPage(false), getCurrentSpace(false), []);
      }
      else if(WebIDE.currentEditor === "view") {
        initViewEditor();
        WebIDE.continueLoadAll();
      }
      else { //Element loaded from hash : added to loadList
        WebIDE.loadList.push([WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters()]);
        WebIDE.continueLoadAll();
      }
    },
    continueLoadAll : function() {
      if(WebIDE.loadList.length &gt; 0) {
        var tabToLoad = WebIDE.loadList.shift();
        goToNewPage(tabToLoad[0], tabToLoad[2], tabToLoad[1], tabToLoad[3], true);
      }
    },
    toggleFullScreen : function() {
      WebIDE.fullscreen = !WebIDE.fullscreen;
      if(WebIDE.fullscreen) { //Switch fullscreen ON
        $('#editorBlock').addClass('editor-fullscreen');
        $('#footerglobal').hide();
        $('#contentMainBlock').css({
          "height" : ($(window).height()-$('#editorTabBar').outerHeight()-$('#hierarchyBottomActionsBar').outerHeight()-10)+"px"
        });
        $('.actionmenu').hide();
      }
      else { //Switch fullscreen OFF
        $('#editorBlock').removeClass('editor-fullscreen');
        $('#footerglobal').show();
        $('#contentMainBlock').css({
          "height" : "auto"
        });
        $('.actionmenu').show();
      }
      $('.editorOtherFieldsBlockContent').hide();
      $('.editorOtherFieldsBlockTitle').hide();
      $('.editorOtherFieldsBlock').css({
        'width' : 'auto',
      });
      $('.editorDisplayAdvancedFields').html($('#hierarchyClose').html());
      $(window).resize(WebIDE.fixContentBlockHeight);
    },
    fixContentBlockHeight : function() {
      if(WebIDE.fullscreen) {
        $('#contentMainBlock').css({
          "height" : ($(window).height()-$('#editorTabBar').outerHeight()-$('#hierarchyBottomActionsBar').outerHeight()-10)+"px"
        });
      }
    },
    init : function() {
      setCurrentPage(getDocumentReferenceData('page'));
      setCurrentSpace(getDocumentReferenceData('space'));
      setDocumentReferenceData();
      WebIDE.masterSpace = getDocumentReferenceData('space');
      WebIDE.masterPage = getDocumentReferenceData('page');
      WebIDE.currentTree = getCookieHierarchy('currentTree') || 'logical';
      WebIDE.currentEditor = (XWiki.editor === 'class') ? XWiki.editor : 'view';
      WebIDE.visibleSpaces = getCookieHierarchy('visibleSpaces').split(',');
      WebIDE.visiblePages = getCookieHierarchy('visiblePages').split(',');
      WebIDE.visibleCategory = getCookieHierarchy('visibleCategory').split(',');

      if($('#syntaxHState').val() === 'old') { //TODO: remove that part when SyntaxHighlighting 3.x will be available on XWiki 6.2+
        initCodeMirrorInternals();
      }

      if(XWiki.webapppath.substr(0,1) === '/') {
        XWiki.webapppath = XWiki.webapppath.substr(1,(XWiki.webapppath.length-1));
      }

      // Get the "get" and "view" url structure for ajax queries
      WebIDE.wikiGetURL = '/'+XWiki.webapppath+''+XWiki.servletpath+'get/';
      if(window.docgeturl.indexOf('/get/') &gt;= 0) {
        WebIDE.wikiGetURL = window.docgeturl.substring(0,window.docgeturl.indexOf('/get/')+5);
      }
      WebIDE.wikiViewURL = '/'+XWiki.webapppath+''+XWiki.servletpath+'view/';
      if(window.docviewurl.indexOf('/'+XWiki.currentSpace+'/') &gt;= 0) {
        WebIDE.wikiViewURL = window.docviewurl.substring(0,window.docviewurl.indexOf('/'+XWiki.currentSpace+'/')+1);
      }

      // Check if FontAwesome is loaded, and load it if not
      WebIDE.ssxUrl = '/'+XWiki.webapppath+''+XWiki.servletpath+'ssx/';
      if (!$("link[href*='IconThemes/FontAwesome']").length) {
        $('&lt;link type="text/css" href="'+WebIDE.ssxUrl+'IconThemes/FontAwesome" rel="stylesheet"&gt;').appendTo("head");
      }

      // Change current editor and page if there is a hash
      var hashURL = window.location.hash.substring(1).split('&amp;!!');
      if(hashURL.size() &gt;= 5) {
        WebIDE.currentEditor = hashURL[1];
        WebIDE.currentTree = hashURL[2];
        setCurrentPage(decodeURIComponent(hashURL[3]));
        setCurrentSpace(decodeURIComponent(hashURL[4]));
      }
      if(hashURL.size() &gt; 5){
        Modules[WebIDE.currentEditor].initHash(hashURL);
        window.location.hash = '';
      }

      // Improve the F5 shortcut to stay on the current editor and the current page
      if(WebIDE.currentEditor !== 'class') {
        shortcut.add("F5", function() {
          var parameters = [];
          if(Modules[WebIDE.currentEditor]) {
            parameters = Modules[WebIDE.currentEditor].getParameters();
          }
          var hash = getHash(WebIDE.currentEditor, encodeURIComponent(getCurrentPage(false)), encodeURIComponent(getCurrentSpace(false)), parameters);
          window.location = window.docviewurl+hash;
          location.reload();
        });
      }

      // Display a warning message when the user try to close/reload the tab/window and he has unsaved content
      window.onbeforeunload = function() {
        if(WebIDE.currentEditor !== 'class') {
          var unsaved = false;
          var openedTabs = [];
          $('.editorTabButton').each(function(index, elt) {
            var editor = $(elt).attr('data-editor');
            var space = $(elt).attr('data-space');
            var page = $(elt).attr('data-page');
            var parameters = Modules[editor].getParametersFromTab($(elt));
            var list = encodeURIComponent([encodeURIComponent(editor), encodeURIComponent(space), encodeURIComponent(page), encodeURIComponent(parameters)]);
            openedTabs.push(list);
            var tabNumberId = $(elt).attr('data-tabnumber');
            if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
              unsaved = true;
            }
          });
          window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.tabs'] = openedTabs;
          if(unsaved) {
            return "You have unsaved content! Are you sure you want to close the page?";
          }
        }
      };

      // Change CodeMirror default parameters when an instance of the editor is created
      $('body').on('DOMNodeInserted', function(e) {
        if ($(e.target).is('.CodeMirror')) {
          window.setTimeout(function() {
            $(e.target).css({'height':'650px'});
            var cmInstance = $(e.target)[0].CodeMirror;
            cmInstance.setOption('lineWrapping', true);
            var parentTab = $(e.target).closest('.editorTab');
          }, 50);
        }
      });

      // Check for unsaved content
      $('#contentMainBlock').on('keyup click', function(){
        if($.inArray(WebIDE.currentEditor, Object.keys(Modules)) &gt;= 0 &amp;&amp; !WebIDE.LOADING &amp;&amp; !WebIDE.SAVING) {
          // Display a star in the old tab button if there is unsaved content when we leave it
          var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
          var jQueryTabId = '#'+tabId;
          var tabNumberId = getTabNumber(jQueryTabId);
          if(WebIDE.tabCount &gt; 0 &amp;&amp; tabNumberId &gt; 0) {
            var unsavedState = (WebIDESavedContent[tabNumberId] !== getCurrentContent(tabNumberId));
            setStar(unsavedState, tabNumberId);
          }
        }
      });

      // Add the click events for the buttons to hide or show the whole hierarchy
      $('#hierarchyClose').click(function(e){
        $('#hierarchyContent').hide();
        $('#hierarchyOpenBlock').show();
        $('#hierarchyCloseBlock').hide();
        $("#hierarchyBlock").css({
          "min-width": "42px",
          "width": "42px"
        });
      });
      $('#hierarchyOpenBlock').click(function(e){
        $('#hierarchyOpenBlock').hide();
        $('#hierarchyCloseBlock').show();
        $('#hierarchyContent').show();
        $("#hierarchyBlock").removeAttr('style');
      });
      $('#hierarchyRefresh').on('click', Hierarchy.reload);
      $('#hierarchyChangeTree').on('click', Hierarchy.changeTreeView);
    }
  };
  var insertTags = function(){return true}; // Prevent issues with Syntax Highligthing extension

  //-------------------------------------
  //------- WebIDE initialization -------
  //-------------------------------------

  // Set the WebIDE environment
  WebIDE.init();
  // Initialize the hierarchy menu events
  Hierarchy.init();
  Hierarchy.initModals();
  // Restore opened and active tabs from last session
  WebIDE.restorePreviousSession();

  //-------------------------------------
  //------------ COMMONS API ------------
  //------ Wiki and object editors ------
  //-------------------------------------
  // Project browsing tools
  // Common setters/getters
  // Title tools
  // Tabs tools
  // CodeMirror editor tools
  // Modals tools
  // Nested Spaces tools
  //-------------------------------------

  /*
   * Project browsing
   * ---------------------------------
   * initEditor()
   * initViewEditor()
   * cancelAndViewIDE(newTab)
   * goToNewPage(mode, file, folder, parameters)
   * getHash(mode, file, folder, parameters)
   * resetAllParameters()
   * saveAll()
   * continueSaveAll(success, xhr, folder, file)
   * addSaveEvents(addEvents)
   * setStar(state, tabNumberId)
   */

  /**
   * Initialize editors
   * initEditor() : one-time initialization of the wiki/object editor (with tabs)
   * initViewEditor() : one-time initialization of the view mode for the master page
   */
  function initEditor() {
    $('.editorViewElement').hide();
    $('.editorEditElement').css({"display" : "block"});
    addSaveEvents(true);
  }
  function initViewEditor() {
    $('.editorEditElement').hide();
    $('.editorViewElement').css({"display" : "block"});
    addSaveEvents(false);
  }

  /**
   * Go to view mode of the current edited page
   * @input Boolean newTab : Open the view mode in a newtab
   */
  function cancelAndViewIDE(newTab) {
    if(newTab) {
      window.open(WebIDE.wikiViewURL+getCurrentSpace(false, true)+'/'+getCurrentPage(false));
    }
    else {
      window.location.href = WebIDE.wikiViewURL+getCurrentSpace(false, true)+'/'+getCurrentPage(false);
    }
  }

  /**
   * goToNewPage() : change the current page to display
   * @input String mode: the edition mode to use (wiki or object)
   * @input String file: the file name of the document to edit
   * @input String folder: the folder name where is located the document to edit
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String locale: the locale of the new tab
   */
  function goToNewPage(mode, file, folder, parameters, loadAllTabs) {
    if(mode === 'class') {
      window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'edit/'+getURLSpacesString(folder)+'/'+file+'?editor=class#!XWebIDE';
    }
    else if(WebIDE.currentEditor === 'class') {
      var redirectHash = getHash(mode, file, folder, parameters);
      window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'view/'+getURLSpacesString(WebIDE.masterSpace)+'/'+WebIDE.masterPage+redirectHash;
    }
    else {
      if(!$(WebIDE.TAB_MAIN_CONTAINER).is(":visible")) {
        initEditor();
      }
      // Load the new tab data
      setCurrentPage(file);
      setCurrentSpace(folder);
      WebIDE.currentEditor = mode;
      resetAllParameters()
      Modules[WebIDE.currentEditor].setParameters(parameters);
      var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
      var jQueryTabId = '#'+tabId;
      //Open the tab
      if(!$(jQueryTabId).length) { //Create a new tab
        createTab(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
        Modules[mode].load(loadAllTabs);
      }
      else { //Open an existing tab
        $('.editorTab').hide();
        $(jQueryTabId).show();
        if(WebIDE.syntaxHighlighting) {
          window.setTimeout(function() {
            $(jQueryTabId+' .CodeMirror').each(function(i, elmt) {
              $(elmt)[0].CodeMirror.refresh();
            });
          }, 50);
        }
        setActiveTab(WebIDE.currentEditor, getCurrentPage(false), getCurrentSpace(false), Modules[WebIDE.currentEditor].getParameters());
      }
      // CHange the effect of the bottom delete button (delete an object or a page or ?? depending on the current editor)
      Modules[WebIDE.currentEditor].setDeleteButton();
    }
  }

  /**
   * Get the hash which has to be added to the url to reload the current tab when reloading the page
   * @input String mode: the edition mode to use (wiki or object)
   * @input String file: the file name of the document to edit
   * @input String folder: the folder name where is located the document to edit
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String locale: the locale of the new tab
   */
  function getHash(mode, file, folder, parameters) {
    var addParameters = '';
    if(parameters) {
      for (var index = 0; index &lt; parameters.length; ++index) {
        if(parameters[index]) {
          addParameters += '&amp;!!'+parameters[index];
        }
      }
    }
    return '#!XWebIDE&amp;!!'+mode+'&amp;!!'+WebIDE.currentTree+'&amp;!!'+file+'&amp;!!'+folder+addParameters;
  }

  /**
   * Reset parameters for all modules
   */
  function resetAllParameters() {
    for(var editor in Modules) {
      Modules[editor].resetParameters();
    }
  }

  /**
   * Get the list of tabs which need to be saved and initialize the saving phase.
   */
  function saveAll() {
    var tabNumberId, mode;
    if(WebIDE.saveAllList.length === 0) {
      $('.editorTabButton').each(function(index, elmt) {
        tabNumberId = $(elmt).attr('data-tabnumber');
        mode = $(elmt).attr('data-editor');
        if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
          WebIDE.saveAllList.push([mode, tabNumberId]);
        }
      });
      if(WebIDE.saveAllList.length &gt; 0) {
        setSavingState(true, "Saving all tabs...");
        continueSaveAll(true);
      }
      else {
        setSavingState(false, "All tabs are already saved!", 2500);
      }
    }
  }
  /**
   * Save the tabs in the "saveAllList" one by one
   * @input Boolean success : Page successfully saved?
   * @input (opt) xhr : xhr object in case of error
   * @input (opt) String folder : Name of the folder in which the error happened
   * @input (opt) String file : Name of the file whose saving has failed
   */
  function continueSaveAll(success, xhr, folder, file) {
    WebIDE.savedAll = WebIDE.savedAll + 1;
    var saveTotal = WebIDE.saveAllList.length;
    if(!success) {
      WebIDE.savedAllError.push([xhr.statusText, folder, file]);
    }
    if(WebIDE.savedAll === saveTotal) {
      var msg = 'All tabs are saved!';
      var cssClass = 'green';
      var delay = 2500;
      if(WebIDE.savedAllError.length &gt; 0) {
        msg = 'Tabs saved. Error while saving:';
        WebIDE.savedAllError.each(function(index, elt) {
          msg += ' ['+elt[1]+'.'+elt[2]+' : '+elt[0]+']';
        });
        cssClass = 'red';
        delay = 5000;
      }
      setSavingState(false, msg, delay, cssClass);
      WebIDE.savedAll = -1;
      WebIDE.saveAllList = [];
      WebIDE.savedAllError = [];
    }
    else if(WebIDE.savedAll &lt; saveTotal) {
      if(WebIDE.savedAll !== 0) {
        var msg = WebIDE.savedAll+'/'+saveTotal+' tabs done...';
        var cssClass = 'green';
        if(WebIDE.savedAllError.length &gt; 0) {
          msg += ' (Errors: '+WebIDE.savedAllError.length+')';
          cssClass = 'red';
        }
        setSavingState(true, msg, null, cssClass);
      }
      var nextSave = WebIDE.saveAllList[WebIDE.savedAll];
      var mode = nextSave[0];
      var tabNumberId = nextSave[1];
      Modules[mode].save(tabNumberId, true, true, true);
    }
  }

  /**
   * addSaveEvents(addEvents)
   * Recreate the default shortcuts to save a page in XWiki in the Web IDE (Alt+S, Alt+Shift+S, Alt+C)
   * Remove the existing events and add them again if requested
   * @input Boolean addEvents : add the events or not?
   */
  function addSaveEvents(addEvents) {
    shortcut.remove("Alt+Shift+S");
    shortcut.remove("Alt+S");
    shortcut.remove("Alt+C");
    shortcut.remove("Alt+Shift+C");
    if(addEvents) {
      // Add events on buttons and shortcuts
      $('#hierarchySaveButtonIDE').click(function(e){
        e.preventDefault();
        saveEventsFunction(true);
      });
      $('#hierarchySaveViewButtonIDE').click(function(e){
        e.preventDefault();
        saveEventsFunction(false);
      });
      $('#hierarchyDiscardViewButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE(false);
      });
      $('#hierarchyViewTabButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE(true);
      });
      shortcut.add("Alt+Shift+S", function() {
        saveEventsFunction(true);
      });
      shortcut.add("Alt+S", function() {
        saveEventsFunction(false);
      });
      shortcut.add("Alt+C", function() {
        cancelAndViewIDE(false);
      });
      shortcut.add("Alt+Shift+C", function() {
        cancelAndViewIDE(true);
      });
    }
  }
  function saveEventsFunction(continueEdit) {
    if(WebIDE.syntaxHighlighting) {
      synchronizeCodeMirrorContent();
    }
    var jQueryTabId = '#'+getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
    var tabNumberId = getTabNumber(jQueryTabId);
    Modules[WebIDE.currentEditor].save(tabNumberId, true, continueEdit, false);
  }

  /**
   * Write a star in a inactive tab button if its content is unsaved
   * @input Boolean state : true = add the star, false = remove the star
   * @input Int tabNumberId : the number ID of the selected tab
   */
  function setStar(state, tabNumberId) {
    var tabStarElement = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"] .unsavedTab');
    // Add a star in the hierarchy if the content has changed
    if(state == true) {
      tabStarElement.show();
    }
    else {
      tabStarElement.hide();
    }
  }

  /*
   * Common setters/getters
   * ---------------------------------
   * setSavingState(state, msg, delay, cssClass)
   * setLoadingState(state, msg, delay, cssClass)
   * setHierarchyState(msg, delay, cssClass)
   * setCurrentPage(file)
   * setCurrentSpace(folder)
   * getCurrentPage(escaped)
   * getCurrentSpace(escaped, url, rest)
   * setSavedContent(tab)
   * getCurrentContent(tabNumberId)
   * getDocumentReferenceData(dataType)
   * setDocumentReferenceData()
   */

  /**
   * Set the state of the loading and/or saving variable and the text in the information div
   * @input Boolean state: true = busy, false = not in use
   * @input (Opt) String msg: the message to display in the information div
   * @input (Opt) Int delay: the duration (in millisecond) for the display of the information div (infinite if not provided)
   * @input (Opt) String cssClass: The CSS class to add to the information div (only "red" is available for now)
   */
  function setSavingState(state, msg, delay, cssClass) {
    setState(1, state, msg, delay, cssClass);
  }
  function setLoadingState(state, msg, delay, cssClass) {
    setState(2, state, msg, delay, cssClass);
  }
  function setHierarchyState(msg, delay, cssClass) {
    setState(3, true, msg, delay, cssClass);
  }
  function setState(type, state, msg, delay, cssClass) {
    if(type === 1) { //saving
      WebIDE.SAVING = state;
      var message = 'Saving...';
      var htmlElement = $('#hierarchySavingState');
    }
    else if(type === 2) { //loading
      WebIDE.LOADING = state;
      var message = 'Loading...';
      var htmlElement = $('#hierarchyLoadingState');
    }
    else { //other operation
      var message = 'Processing...';
      var htmlElement = $('#hierarchyState');
    }
    if(msg) {message = msg;}
    if(cssClass) {
      htmlElement.attr('class', cssClass);
    }
    htmlElement.html('&lt;strong&gt;'+message+'&lt;/strong&gt;').show();
    if(delay) {
      htmlElement.delay(delay).queue(function(n) {
        $(this).hide().removeAttr('class').html('');
        n();
      });
    }
  }

  /**
   * Set data about the current document edited
   * @input String file/folder/objName/objNumber: the value currently used in the editor
   */
  function setCurrentPage(file) {
    WebIDE.currentPage = file;
  }
  function setCurrentSpace(folder) {
    WebIDE.currentSpace = folder;
  }
  /**
   * Get data about the current document edited
   * @input Boolean escaped: return an escaped (with backslashes) string of the requested data (My\.Folder.My\.Nested\.Folder or My\.Page)
   * @input Boolean url: return an URL-formatted string representing the folder (A/B/C)
   * @input Boolean rest: return an REST-formatted string representing the folder (spaces/A/spaces/B/spaces/C/)
   */
  function getCurrentPage(escaped) {
    if(escaped) {return getEscapedValue(WebIDE.currentPage);}
    else {return WebIDE.currentPage;}
  }
  function getCurrentSpace(escaped, url, rest) {
    if(escaped) {return getSpacesEscaped(WebIDE.currentSpace);}
    else if(url) {return getURLSpacesString(WebIDE.currentSpace)}
    else if(rest) {return getRestSpacesString(WebIDE.currentSpace);}
    else {return WebIDE.currentSpace;}
  }
  function getEscapedValue(file) {
    return file.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  }

  /**
   * Save the value of the document saved in XWiki for the selected tab
   * @input Int tab: the number ID of a tab
   * The "savedContent" variable can then be compared with the current content (getCurrentContent(tab)) to know if modifications have been done in the document
   */
  function setSavedContent(tab) {
    if(tab) {
      WebIDESavedContent[tab] = getCurrentContent(tab);
    }
  }
  /**
   * Get a text value of the selected tab's content
   * @input Int tabNumberId: the number ID of a tab
   * @out The textarea value of a wiki editor tab or the concatenated string value of an object editor tab
   */
  function getCurrentContent(tabNumberId) {
    var currentContent = '';
    var tabElement = null;
    // Get the tab main "div" from its number or from the current tab
    if(tabNumberId) {
      tabElement = $('.editorTab[data-tabnumber="'+tabNumberId+'"]');
    }
    else {
      tabElement = $('#'+getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters()));
      var tabNumberId = $(tabElement).attr('data-tabnumber');
    }
    // Determine the editor used in the selected tab
    var selectedTabEditor = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]').attr('data-editor');
    // Get the content of the tab, depending on its editor
    if(WebIDE.syntaxHighlighting) {synchronizeCodeMirrorContent();}
    return Modules[selectedTabEditor].getCurrentContent(tabElement);
  }

  /**
   * Get data from about the current document (i.e. the master page) from XWiki API
   */
  function getDocumentReferenceData(dataType) {
    var restURL = xm ? xm.restURL : $('meta[name="restURL"]').attr('content');
    switch(dataType) {
      case 'wiki':
        return xm ? xm.wiki : $('meta[name="wiki"]').attr('content');
        break;
      case 'space':
        return xm ? xm.space : $('meta[name="space"]').attr('content');
        break;
      case 'page':
        return xm ? xm.page : $('meta[name="page"]').attr('content');
        break;
      case 'fullName':
        return xm ? xm.document : $('meta[name="document"]').attr('content');
        break;
      case 'form_token':
        return xm ? xm.form_token : $('meta[name="form_token"]').attr('content');
        break;
      case 'restURL':
        return (typeof restURL != 'undefined') ? restURL : '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+getRestSpacesString(getDocumentReferenceData('space'))+'/pages/'+getDocumentReferenceData('page');
        break;
      default:
        return xm ? (xm.documentReference ? xm.documentReference : xm.wiki+':'+xm.space+'.'+xm.page) : $('meta[name="wiki"]').attr('content')+':'+$('meta[name="space"]').attr('content')+'.'+$('meta[name="page"]').attr('content');
    }
  }
  /**
   * Override or create a 'xm' variable in the __class__ editor in order to get the right values.
   * "xm" (xwiki-meta) represents an XWiki document and should contain data about the master page.
   */
  function setDocumentReferenceData() {
    if(XWiki.editor == 'class') {
      xm = {
        wiki: getDocumentReferenceData('wiki'),
        space: $('#hierarchyMasterDocSpace').val(),
        page: $('#hierarchyMasterDocName').val(),
        document: $('#hierarchyMasterDocSpace').val()+'.'+$('#hierarchyMasterDocName').val(),
        form_token: getDocumentReferenceData('form_token'),
        restURL: '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData("wiki")+'/'+getRestSpacesString($('#hierarchyMasterDocSpace').val())+'/pages/'+$('#hierarchyMasterDocName').val(),
        documentReference: getDocumentReferenceData('wiki')+':'+$('#hierarchyMasterDocSpace').val()+'.'+$('#hierarchyMasterDocName').val()
      };
    }
  }

  /*
   * Title tools
   * ---------------------------------
   * getRawTitle(folder, file, locale)
   * getParentPage(folder, file, locale)
   * getCurrentTitle(tabId)
   * getCurrentParent(jQueryTabId)
   */

  /**
   * Get the raw title of the selected document
   * @input String folder: the space of the document
   * @input String file: the name of the document
   */
  function getRawTitle(folder, file, locale) {
    var editPageTitle = $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+locale+'"]').attr('data-rawtitle');
    return editPageTitle || '';
  }
  /**
   * Get the parent of the selected document
   * @input String folder: the space of the document
   * @input String file: the name of the document
   */
  function getParentPage(folder, file, locale) {
    var editPageParent = $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+locale+'"]').attr('data-parent');
    return editPageParent || '';
  }
  /**
   * Get the title from the input field in the page
   */
  function getCurrentTitle(jQueryTabId) {
    return $(jQueryTabId+' .editorWikiTitle').val();
  }
  /**
   * Get the title from the input field in the page
   */
  function getCurrentParent(jQueryTabId) {
    return $(jQueryTabId+' .editorWikiParent').val();
  }

  /*
   * Tabs tools
   * ---------------------------------
   * createTab(mode, folder, file, parameters)
   * initOtherFieldsBlock(dataNode, jQueryTabId)
   * closeTab(element, tabName)
   * removeTab(element, tabNumberId)
   * setActiveTab(mode, file, folder, parameters)
   * getTabId(mode, folder, file, parameters)
   * getTabNumber(jTabId)
   * fixIds(elem, prefix)
   */

   /**
   * Create a new tab when the user wants to edit a page not already opened
   * @input String mode: Editor mode (wiki or object for now)
   * @input String id: id to use for the tab (can be retrieved with getTabId)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  function createTab(mode, folder, file, parameters) {
    var id = getTabId(mode, folder, file, parameters);
    var jQueryId = '#'+id;
    $('.editorTab').hide();
    WebIDE.tabCount++;
    var tabName = Modules[mode].getTabName(folder, file, parameters);
    var decodedParameters = parameters.map(decodeURIComponent);
    var currentModule = Modules[mode];
    if(tabName.length &gt; 30) tabName = tabName.substr(0,27)+'...';
    var prettyModeName;
    var iconModeId;
    var tabModeClass;
    var addTextareaWiki = '';
    var addEditorParameters = '';
    if(WebIDE.tabCount == 1) { //first tab creation
      $('&lt;span class="btn btn-primary"&gt;&lt;span id="editorToggleFullscreen" class="fa fa-arrows-alt"&gt;&lt;/span&gt;&lt;/span&gt;').appendTo('#editorTabBar').on('click', function(e) {
        e.preventDefault();
        WebIDE.toggleFullScreen();
        return false;
      });
      $('&lt;span class="btn btn-success"&gt;Save all tabs&lt;/span&gt;').appendTo('#editorTabBar').on('click', function(e) {
        e.preventDefault();
        saveAll();
        return false;
      });
    }
    addEditorParameters = Modules[mode].getTabButtonParameters(parameters);
    prettyModeName = mode.charAt(0).toUpperCase() + mode.slice(1);
    iconModeId = '#editor'+prettyModeName+'Icon';
    tabModeClass = 'editor'+prettyModeName+'Tab';
    if(!$(jQueryId).length) {
      $(WebIDE.TAB_MAIN_CONTAINER).append('&lt;div id="'+id+'" class="editorTab '+tabModeClass+'" data-tabnumber="'+WebIDE.tabCount+'"&gt;&lt;/div&gt;');
      var tabButton = $('&lt;span class="editorTabButton" data-tabnumber="'+WebIDE.tabCount+'" data-editor="'+mode+'" data-space="'+encodeURIComponent(folder)+'" data-page="'+encodeURIComponent(file)+'" '+addEditorParameters+' title="('+prettyModeName+') '+folder+'.'+file+'"&gt;'+$(iconModeId).html()+' &lt;strong class="unsavedTab"&gt;*&lt;/strong&gt; '+tabName+'&lt;/span&gt;').appendTo('#editorTabBar').on('mousedown', function(e) {
        e.preventDefault();
        if(e.which === 1) { // Left-click
          if(decodeURIComponent(file) !== getCurrentPage(false) || decodeURIComponent(folder) !== getCurrentSpace(false) || $(decodedParameters).not(currentModule.getParameters()).length !== 0 || $(currentModule.getParameters()).not(decodedParameters).length !== 0 || WebIDE.currentEditor !== mode) {
            goToNewPage(mode, file, folder, parameters);
          }
        }
        else if(e.which === 2) { // Wheel click
          closeTab($(this), '('+prettyModeName+') '+tabName);
        }
        return false;
      });
      $($('#editorCrossIcon p').html()).appendTo(tabButton).click(function() {
        closeTab($(this).parent(), '('+prettyModeName+') '+tabName);
        return false;
      });
      setActiveTab(mode, file, folder, parameters);
      WebIDE.fixContentBlockHeight();
    }
  }

  /**
   * Create the "Advanced fields" block in a tab, witht he ability to show or hide it with a button
   * @input DOM dataNode : The node where the block has to be created
   * @input String jQueryTabId : The jQuery Id of the selected tab
   */
  function initOtherFieldsBlock(dataNode, jQueryTabId, title) {
    var menuNodeBlock = $('&lt;div class="editorOtherFieldsBlock"&gt;&lt;/div&gt;').appendTo(dataNode);
    $('&lt;div class="editorOtherFieldsBlockContent"&gt;&lt;/div&gt;').appendTo(menuNodeBlock);
    $(menuNodeBlock).css({'backgroundColor' : $('#hierarchyBlock').css('backgroundColor')});
    $('&lt;span class="editorDisplayAdvancedFields"&gt;'+$('#hierarchyOpenBlock').html()+'&lt;/span&gt; &lt;strong class="editorOtherFieldsBlockTitle"&gt;'+title+'&lt;/strong&gt;').prependTo(menuNodeBlock);
    $(menuNodeBlock).find('.editorDisplayAdvancedFields').click(function() {
      $(menuNodeBlock).find('.editorOtherFieldsBlockContent').toggle();
      $(menuNodeBlock).find('.editorOtherFieldsBlockTitle').toggle();
      if($(menuNodeBlock).find('.editorOtherFieldsBlockContent').is(':visible')) {
        $(menuNodeBlock).find('.editorDisplayAdvancedFields').html($('#hierarchyOpenBlock').html());
        $(menuNodeBlock).css({
          'width' : '400px'
        });
      }
      else {
        $(menuNodeBlock).find('.editorDisplayAdvancedFields').html($('#hierarchyClose').html());
        $(menuNodeBlock).css({
          'width' : 'auto'
        });
      }
    });
    return menuNodeBlock;
  }

  /**
   * Beginning the process of closing a tab (the user has just clicked on the cross)
   * @input DOM element: JS element representing the closed tab button
   * @input String tabName: Name of the tab which is going to be closed (needed for the confirmation modal)
   */
  function closeTab(element, tabName) {
    var tabNumberId = $(element).attr('data-tabnumber');
    if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
      if(WebIDE.nextTabToClose === null) {
        WebIDE.nextTabToClose = element;
        $('#hierarchyCloseTabModalInfo').html(tabName);
        if(WebIDE.bootstrap()) {$('#hierarchyCloseTabModal').modal('show');}
        else {openModalNoBootstrap('#hierarchyCloseTabModal');}
      }
    }
    else {removeTab(element, tabNumberId);}
  }
  /**
   * Removing the tab (the user has confirmed his action in the modal if unsaved content)
   * @input DOM element: JS element representing the closed tab button
   * @input Int tabNumberId: The tab number id which is going to be closed
   */
  function removeTab(element, tabNumberId) {
    var isActiveTab = $(element).hasClass('editorActiveTab');
    WebIDE.nextTabToClose = null;
    $('.editorTab[data-tabnumber="'+tabNumberId+'"]').remove();
    $(element).remove();
    // If all tabs are closed, open master page, else, open the first tab in the list
    if(!$('.editorTab').length) {
      initViewEditor();
      setCurrentPage(WebIDE.masterPage);
      setCurrentSpace(WebIDE.masterSpace);
      WebIDE.currentEditor = 'view';
      setActiveTab('view', WebIDE.masterPage, WebIDE.masterSpace, []);
    }
    else if(isActiveTab) {
      var firstTab = $('.editorTabButton:first');
      var tabMode = firstTab.attr('data-editor');
      var tabFile = firstTab.attr('data-page');
      var tabFolder = firstTab.attr('data-space');
      var parameters = Modules[tabMode].getParametersFromTab(firstTab);
      goToNewPage(tabMode, tabFile, tabFolder, parameters);
    }
    WebIDE.fixContentBlockHeight();
  }

  /**
   * Change the active tab (style of the buttons and of the menu only)
   * @input String mode: Editor mode (wiki or object for now)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  function setActiveTab(mode, file, folder, parameters) {
    var tabId = getTabId(mode, folder, file, parameters);
    var jQueryTabId = '#'+tabId;
    var tabNumber = getTabNumber(jQueryTabId);
    var menuElement;
    // Change the style of the tab buttons :
    $('.editorTabButton').removeClass('editorActiveTab');
    $('.editorTabButton[data-tabnumber='+tabNumber+']').addClass('editorActiveTab');
    // Change the active page in the menu :
    $('.hierarchy-page-active').removeClass('hierarchy-page-active');
    if(mode === 'view') {
      menuElement = $('.hierarchy-viewElement[data-space="'+folder+'"][data-page="'+file+'"]');
    }
    else if(mode === 'class') {
      menuElement = $('.editClass[data-space="'+folder+'"][data-page="'+file+'"]');
    }
    else {
      menuElement = Modules[mode].getMenuElement(folder, file, parameters);
    }
    menuElement.addClass('hierarchy-page-active');
    menuElement.parents().siblings('.hierarchy-displayPage, .hierarchy-toggleFolder').find('span[id^="hierarchyDisplayPage"], span[id^="hierarchyDisplaySpace"]').addClass('hierarchy-page-active');
    menuElement.parents('ul.hierarchy-list').show();
  }

  /**
   * Get the id of a tab from the name of the document and the edition mode
   * @input String mode: Editor mode (wiki or object for now)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  function getTabId(mode, folder, file, parameters) {
    var addParameters = '';
    if(parameters) {
      for (var index = 0; index &lt; parameters.length; ++index) {
        if(parameters[index]) {
          addParameters += '_'+encodeURIComponent(parameters[index]).replace(/\./g, '2E').replace(/%/g, '');
        }
      }
    }
    return 'tab_'+mode+'_'+encodeURIComponent(folder).replace(/\./g, '2E').replace(/%/g, '')+'_'+encodeURIComponent(file).replace(/\./g, '2E').replace(/%/g, '')+addParameters;
  }

  /**
   * Get the number of a tab from its id
   * @input String jTabId: The id used for the tab main "div"
   */
  function getTabNumber(jTabId) {
    if($(jTabId).length) {
      return $(jTabId).attr('data-tabnumber');
    }
    else return 0;
  }

  /**
   * Add the "tab{Tab Number ID}_" prefix to the id of every element in an object
   * @input DOM elem: The element representing the whole object (all the IDs of its children will be changed)
   * @input String prefix: The prefix to add in the IDs
   */
  function fixIds(elem, prefix) {
    $(elem).find("[id]").add(elem).each(function() {
        this.id = prefix+this.id;
    })
  }

  /*
   * CodeMirror editor tools
   * ---------------------------------
   * initCodeMirrorsCustom(mode, id)
   * synchronizeCodeMirrorContent()
   */

  /**
   * Initialize all possible CodeMirror instances
   * @input String mode: the edition mode concerned (wiki or object)
   * @input String id: The id of the tab (in order to avoid the creation of CodeMirror instances for existing textarea in other tabs)
   */
  function initCodeMirrorsCustom(mode, id) {
    // SyntaxHighlighting extension is installed but we have to wait for it to be loaded in that page
    if(WebIDE.syntaxHighlighting &amp;&amp; WebIDE.syntaxHighlightingState()) {
      Modules[mode].initCodeMirror(id);
    }
    else {
      setTimeout(function() {initCodeMirrorsCustom(mode, id)}, 150);
    }
  }
  /**
   * Synchronize the original textareas' contents with the codemirrors' contents.
   */
  function synchronizeCodeMirrorContent() {
    if(WebIDE.syntaxHighlighting &amp;&amp; WebIDE.syntaxHighlightingState()) {
      $('.CodeMirror').each(function (index) {
        $('.CodeMirror')[index].CodeMirror.save();
      });
    }
    else {
      setTimeout(synchronizeCodeMirrorContent, 150);
    }
  }

  /*
   * Modals tools
   * ---------------------------------
   * resetTabToClose()
   * openModalNoBootstrap(modalId)
   * closeModalNoBootstrap()
   * removeEnterShortcut()
   * fixName(page, type)
   */

  /**
   * Reset the value of the next tab to close if the user cancel its action in the modal
   */
  function resetTabToClose() {
    WebIDE.nextTabToClose = null;
  }

  /**
   * Open the selected modal (if Bootstrap isn't available)
   * @input String modalId : the id of the modal to open
   */
  function openModalNoBootstrap(modalId) {
    $(modalId).show();
    $('#backgroundModalNoBootstrap').show();
  }

  /**
   * Close all the opened modals (if Bootstrap isn't available)
   */
  function closeModalNoBootstrap() {
    resetTabToClose(); // In case of "CloseTab" modal
    removeEnterShortcut(); // In case of "Add folder/page/existingpage" modal
    $('#backgroundModalNoBootstrap').hide();
    $('.modal').hide();
  }

  /**
   * Remove the "Enter" shortcut (meaning the user agreed to do the selected action) when a modal is shown/hidden
   * The shortcut has to be removed since the user need to be able to press enter in the wiki/object editors
   */
  function removeEnterShortcut() {
    shortcut.remove('Enter');
  }

   /**
   * Fix the name of page based on best practices
   */
  function fixName(page, type) {
    var file = page;
    if(type === 'class' &amp;&amp; file.substr(file.length - 5) !== 'Class') {
      file += 'Class';
    }
    else if(type === 'macros' &amp;&amp; file.substr(file.length - 6) !== 'Macros') {
      file += 'Macros';
    }
    else if(type === 'translations' &amp;&amp; file.substr(file.length - 12) !== 'Translations') {
      file += 'Translations';
    }
    return file;
  }

  /*
   * Nested Spaces tools
   * ---------------------------------
   * checkNestedSpaces()
   * getRestSpacesString(spaces)
   * getURLSpacesString(spaces)
   * getSpacesEscaped(spaces)
   * getSpaceAndName(fullName)
   * getSpacesList(spaces)
   */

  /**
   * Check if Nested spaces are available if that version of XWiki
   * @return boolean
   */
  function checkNestedSpaces() {
    var xwikiNested = $('#xwikiNested').val();
    return (xwikiNested === "true");
  }

  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki REST format 'spaces/A/spaces/B'
   */
  function getRestSpacesString(spaces) {
    if(WebIDE.NESTED_SPACES) {
      var spacesEnc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEnc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += 'spaces/'+spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return 'spaces/'+spaces+'';
  }

  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki URL format 'A/B'
   */
  function getURLSpacesString(spaces) {
    if(WebIDE.NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return spaces;
  }

  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The string describing escaped space name 'A\.B'
   */
  function getSpacesEscaped(spaces) {
    if(WebIDE.NESTED_SPACES) {
      return spaces;
    }
    else return spaces.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  }

  /**
   * @param fullName The string describing the full name of a page 'A.B.WebHome'
   * @return The list of the space and the name ['A.B', 'WebHome']
   */
  function getSpaceAndName(fullName) {
    var fullNameEsc = fullName.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
    var existingPageSpace = fullNameEsc.substring(0, fullNameEsc.lastIndexOf(".")).replace('%5C%2E', '\.') || '';
    var existingPageName = fullNameEsc.substring(fullNameEsc.lastIndexOf(".") + 1, fullNameEsc.length).replace('%5C%2E', '\.') || '';
    return [existingPageSpace, existingPageName];
  }

  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The list of nested spaces the page is in
   */
  function getSpacesList(spaces) {
    if(WebIDE.NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var nestedList = [];
      var previousLevel = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        previousLevel += spacesList[i].replace('%5C%2E', '%5C.');
        nestedList.push(previousLevel);
        previousLevel += '.';
      }
      return nestedList;
    }
    else return [spaces];
  }

  //-------------------------------------
  //--------------- OTHER ---------------
  //-------------------------------------

  /**
   * Cookies management
   * Create or read cookies whose name begin with "NameOfTheMasterPage-"
   */
  function setCookieHierarchy(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = WebIDE.masterPage+"-"+cname + "=" + cvalue + "; " + expires + ";path=/";
  }
  function getCookieHierarchy(cname) {
    var name = WebIDE.masterPage+"-"+cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i&lt;ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1);
      if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
  }
  /**
   * Call a function everytime the height of a specified element change
   * @input DOM elm : the observed element
   * @input function callback : the function to call when the "event" is triggered
   */
  function onElementHeightChange(elm, callback){
    var lastHeight = elm.clientHeight, newHeight;
    (function run(){
      newHeight = elm.clientHeight;
      if( lastHeight != newHeight )
        callback();
      lastHeight = newHeight;

      if( elm.onElementHeightChangeTimer )
        clearTimeout(elm.onElementHeightChangeTimer);

      elm.onElementHeightChangeTimer = setTimeout(run, 500);
    })();
  }
});
});</code>
    </property>
    <property>
      <name>Hierarchy panel</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>6</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>3</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>1</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>5</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>4</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c7773fa-9a7a-49a4-b0db-44800f0bf911</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/* Hierarchy Block */
#hierarchyBlock {
  background-color: $theme.fieldGradientColor;
  min-width: 250px;
  width: auto;
  float: left;
  height: 100%;
  resize: horizontal;
  box-sizing: border-box;
  overflow: hidden;
}
/* Project Block */
#hierarchyContent {
  padding: 5px;
  box-sizing: border-box;
}
#hierarchyMainList {
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
#hierarchyMainList li {
  clear: both;
  position: relative;
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
#hierarchyOpenBlock {
  cursor: pointer;
  padding-top: 5px;
  padding-bottom: 5px;
  text-align: center;
}
#hierarchyCloseBlock p {
  padding: 5px;
  margin: 0px;
}
#hierarchyCloseBlock .hierarchy-icon{
  cursor: pointer;
  float: right;
  padding: 5px;
  margin-left: 5px;
}
.exportLink {
  font-weight: bold;
}
#hierarchyBlock p {
  margin : 0;
}
/* Project Block - Colibri skin */
#hierarchyContent ul {
  list-style-type: none;
  margin: 0px;
}
.hierarchy-list p {
  display: inline-block;
  margin: 0px !important;
}
.hierarchy-list img {
  padding: 0px !important;
}
#backgroundModalNoBootstrap {
  position: fixed;
  left: 0px;
  top: 0px;
  right: 0px;
  bottom: 0px;
  z-index: 999;
  background-color: black;
  opacity: 0.3;
  display: none;
}

/* Project Content */
.hierarchy-list {
  list-style-type: none;
  padding-left: 25px;
  margin: 0px;
}
.hierarchy-list p {
  margin: 0px;
}
.hierarchy-no-padding {
  padding-left: 0px;
}
.hierarchy-hidden {
  display: none;
}
.hierarchy-toggleFolder {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-toggleFolder:hover .hierarchySpaceName{
  text-decoration: underline;
}
.hierarchy-toggleFolder p{
  margin-bottom:0;
}
.hierarchy-displayPage {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-displayPage:hover .hierarchyPageName{
  text-decoration: underline;
}
.hierarchy-displayPage p{
  margin-bottom:0;
}
.hierarchy-toggleCategory {
  cursor: pointer;
}
.hierarchy-toggleCategory:hover strong{
  text-decoration: underline;
}
.hierarchyCurrentSpacePageAction{
  font-weight: bold;
}
.hierarchy-page-active {
  font-weight: bold;
  color: black;
}
.hierarchy-export {
  background: none !important;
  border: none;
  padding: 0 !important;
  font: inherit;
  cursor: pointer;
}
.masterExportForm {
  display: inline-block;
  width: 100%;
}
.hierarchy-export-button {
  display: inline-block;
  width: 100%;
}
#hierarchyChangeTree {
  display: inline-block;
  width: 50%;
  box-sizing: border-box;
}
#hierarchyAddNewElement {
  width: 50%;
  box-sizing: border-box;
}
.hierarchy-large-button {
  width: 100% !important;
}
#hierarchyAddNewElement &gt; button {
  width: 100%;
  box-sizing: border-box;
}
.hierarchy-right {
  visibility: hidden;
  cursor: pointer;
  float: right;
  padding: 0px;
}
.hierarchy-right span{
  padding: 3px;
}
.hierarchyAddNewElement {
  visibility: hidden;
  margin: 0px;
  cursor: pointer;
  float: right;
}
.hierarchyAddNewElement ul {
  z-index: 20;
}
#hierarchyContent li:hover &gt; .hierarchyAddNewElement, #hierarchyContent li:hover &gt; .hierarchy-right {
  visibility: visible;
}
.hierarchyAddNewElement.open {
  visibility: visible !important;
}
.hierarchyAddNewElementButton {
  cursor: pointer;
  padding: 3px;
  z-index: 10;
}
/* Page state info */
#hierarchySavingState, #hierarchyLoadingState, #hierarchyState {
  float: right;
  background-color: green;
  color: white;
  border: 2px solid grey;
  padding: 2px;
  display: none;
}
#hierarchySavingState.red, #hierarchyLoadingState.red, #hierarchyState.red {
  background-color: red;
}
#hierarchyExistingPageModalError, #hierarchyPageModalError, #hierarchyFolderModalError, #hierarchyObjectModalError, #hierarchyClassModalError {
  font-weight: bold;
  color: #8A0808;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Hierarchy CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{velocity}}
#set($masterDoc = 'Main.WebHome')
#if($xwiki.exists(${request.masterPage}))
  #set($masterDoc = $xwiki.getDocument(${request.masterPage}))
#elseif($xwiki.exists($util.decodeURI(${request.masterPage})))
  #set($masterDoc = $xwiki.getDocument($util.decodeURI(${request.masterPage})))
#end
#if($xwiki.exists(${request.remotePage}))
  #set($currentDoc = $xwiki.getDocument(${request.remotePage}))
#elseif($xwiki.exists($util.decodeURI(${request.remotePage})))
  #set($currentDoc = $xwiki.getDocument($util.decodeURI(${request.remotePage})))
#else
  #set($currentDoc = $doc)
#end
#set($currentEditor = $!request.editor)
#set($currentTree = 'logical')
#if($!request.treeview)
  #set($currentTree = $!request.treeview)
#end
#if("$!{request.visibleSpaces}" != "")
  #set($visibleSpacesString = $!{request.visibleSpaces})
#end
#set($visibleSpaces = $!visibleSpacesString.split("[,]"))
#if("$!{request.visiblePages}" != "")
  #set($visiblePagesString = $!{request.visiblePages})
#end
#set($visiblePages = $!visiblePagesString.split("[,]"))
#if("$!{request.visibleCategory}" != "")
  #set($visibleCategoryString = $!{request.visibleCategory})
#end
#set($visibleCategory = $!visibleCategoryString.split("[,]"))
(% class="hierarchy-hidden" id="hierarchyOpenBlock" title="Open menu"%)(((
{{html clean="false"}}&lt;span class="fa fa-step-forward"&gt;&lt;/span&gt;{{/html}}
)))
(% id="hierarchyCloseBlock" %)(((
**Project :** $masterDoc.display('projectName', 'view') (% title="Hide menu" id="hierarchyClose" class="hierarchy-icon" %){{html clean="false"}}&lt;span class="fa fa-step-backward"&gt;&lt;/span&gt;{{/html}} (% title="Refresh the menu" id="hierarchyRefresh" class="hierarchy-icon" %){{html clean="false"}}&lt;span class="fa fa-refresh"&gt;&lt;/span&gt;{{/html}}
)))
#set($nestedSpaces = false)
#if($services.model.serialize($services.model.createDocumentReference("wiki", ["A", "B"], "page"), 'default') == 'wiki:A.B.page')
  #set($nestedSpaces = true)
#end
#set($masterObj = $masterDoc.getObject('WebIDECode.ApplicationClass'))
#set($spacesListInit = $masterObj.getProperty('spaces').value)## The value of 'spaces' in the object (before checking for nested spaces)
#set($spacesListNested = $sorttool.sort($spacesListInit))## Same as $spacesListInit if nested spaces don't exist, or add all the subspaces if they exist
#if($nestedSpaces)
  #foreach($space in $spacesListInit)
    #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
    #set($spacePageList = $services.query.xwql($xwql).bindValue('space', $space).execute())
    #foreach($i in [0..1000])
      #if($i &gt;= $spacePageList.size())
        #break
      #end
      #set($addToList =[])
      #set($discard = $finalList.add($spacePageList[$i]))
      #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
      #set($addToList = $services.query.xwql($xwql).bindValue('space', $spacePageList[$i]).execute())
      #foreach($item in $addToList)
        #set($discard = $spacePageList.add($item))
      #end
    #end
    #foreach($spaceElement in $spacePageList)
      #if(!$spacesListNested.contains($spaceElement))
        #set($discard = $spacesListNested.add($spaceElement))
      #end
    #end
  #end
  #set($spacesListNested = $sorttool.sort($spacesListNested))
#end
#set($spacesList = $sorttool.sort($spacesListNested))## Will also contains spaces from existing pages ('pages' in the object)
#set($spacesListAdd = [])
#set($pagesList = $sorttool.sort($masterObj.getProperty('pages').value))
## Manage the case where WebIDE is opened with a page without project
#if($masterDoc.fullName == 'WebIDECode.DefaultProject')
  #set($singlePage = true)
  #set($spacesList = [])
  #set($pagesList = [$currentDoc.fullName])
  #set($currentTree = 'physical')
#end
#foreach($page in $pagesList)
  #set($document = $xwiki.getDocument($page))
  #if(!$spacesList.contains($document.space))
    #set($discard = $spacesList.add($document.space))
  #end
#end
#set($spacesList = $sorttool.sort($spacesList))
## Determine the list of parents of the current document to be able to open and **bold** them in the hierarchy
#if($nestedSpaces)
  #set($spaceParentList = [])
  #set($spacePath = "")
  #set($spaceParentListTemp = $currentDoc.space.replace('\.', '%5C%2E').split('\.'))
  #foreach($item in $spaceParentListTemp)
    #set($spacePath = "${spacePath}$item.replace('%5C%2E', '\.')")
    #set($discard = $spaceParentList.add($spacePath))
    #set($spacePath = "${spacePath}.")
  #end
#else
  #set($spaceParentList = [$currentDoc.space])
#end
#set($beginAddButton = "{{html clean='false' wiki='true'}} &lt;div class='btn-group hierarchyAddNewElement'&gt;&lt;span class='hierarchyAddNewElementButton' class='dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'&gt;&lt;span class='fa fa-plus'&gt;&lt;/span&gt;&lt;span class='sr-only'&gt;Toggle Dropdown&lt;/span&gt;&lt;/span&gt;&lt;ul class='dropdown-menu dropdown-menu-right'&gt;")
#set($endAddButton = '&lt;/ul&gt;&lt;/div&gt;{{/html}}')
#set($beginRemoveButton = "{{html clean='false' wiki='true'}} &lt;div class='btn-group hierarchyAddNewElement'&gt;&lt;span class='hierarchyAddNewElementButton' class='dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'&gt;&lt;span class='fa fa-times'&gt;&lt;/span&gt;&lt;span class='sr-only'&gt;Toggle Dropdown&lt;/span&gt;&lt;/span&gt;&lt;ul class='dropdown-menu dropdown-menu-right'&gt;")
#set($endRemoveButton = '&lt;/ul&gt;&lt;/div&gt;{{/html}}')
(% id="hierarchyContent" %) (((
#if($masterDoc.hasAccessLevel('edit'))
  {{html clean=false}}&lt;form method="post" action="$masterDoc.getURL('view')" class="masterExportForm"&gt;&lt;input type="hidden" name="export" value="1" /&gt;#if($singlePage)&lt;input type="hidden" name="singlePage" value="$escapetool.url($currentDoc.fullName).replace('+', '%20')" /&gt;#end&lt;input class="btn btn-default hierarchy-export-button" type="submit" value="Export the project (XAR)" title="Export the project"/&gt;&lt;/form&gt;{{/html}}
#end
#if($currentTree == 'physical')
  {{include reference="WebIDECode.PhysicalTree" /}}
#else
  {{include reference="WebIDECode.LogicalTree" /}}
#end
{{html clean=false}}
&lt;div id="hierarchyUpdatedFolderList" class="hierarchy-hidden"&gt;
#foreach($space in $spacesListNested)
  #if($xwiki.hasAccessLevel('edit', "$space.$reservedDocumentName"))
    &lt;option value="$escapetool.url($space).replace('+', '%20')"&gt;$space&lt;/option&gt;
  #end
#end
&lt;/div&gt;
{{/html}}
)))
{{html clean="false" wiki="true"}}
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyFolderModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add New Folder&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Folder : &lt;input type="text" id="hierarchyNewFolderName" /&gt;
          &lt;button id="hierarchyAddFolder" class="btn btn-success"&gt;Add the folder&lt;/button&gt;&lt;br&gt;
          &lt;p id="hierarchyFolderModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyExistingPageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add Existing Page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Page Full Name : &lt;input type="text" id="hierarchyExistingPageName" /&gt;
          &lt;button id="hierarchyAddExistingPage" class="btn btn-success"&gt;Add the page&lt;/button&gt;
          &lt;p id="hierarchyExistingPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyPageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title" id="hierarchyAddPageTitle"&gt;Add New Page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Folder : &lt;select id="hierarchyPageFolder"&gt;
          #foreach($space in $spacesListNested)
            #if($xwiki.hasAccessLevel('edit', "$space.$reservedDocumentName"))
              &lt;option value="$escapetool.url($space).replace('+', '%20')"&gt;$space&lt;/option&gt;
            #end
          #end
          &lt;/select&gt;&lt;br&gt;
          &lt;span id="hierarchyAddPageLabel"&gt;Page&lt;/span&gt; : &lt;input type="text" id="hierarchyNewPageName" /&gt;&lt;br&gt;
          &lt;div id="hierarchyAddPageTypeBlock"&gt;Type: &lt;input type="radio" name="hierarchyAddPageType" id="hierarchyAddPageTypeContent" value="content" checked="checked"/&gt; &lt;label for="hierarchyAddPageTypeContent"&gt;Content page &lt;/label&gt; &lt;input type="radio" name="hierarchyAddPageType" id="hierarchyAddPageTypeItem" value="item"/&gt; &lt;label for="hierarchyAddPageTypeItem"&gt;Item page&lt;/label&gt;&lt;br&gt;
            &lt;p&gt;**Content page**: Page where you can edit the content and add JS, CSS, etc...&lt;br&gt;
            **Item page**: Page with an instance of your class&lt;/p&gt;
          &lt;div id="hierarchyAddPageItemBlock" class="hierarchy-hidden"&gt;&lt;select id="hierarchyAddPageItem"&gt;
          &lt;/select&gt;&lt;/div&gt;&lt;/div&gt;
          &lt;div id="hierarchyAddPageLocaleBlock"&gt;Language: &lt;select id="hierarchyAddPageLocale"&gt;
          #foreach($locale in $xwiki.getDocument('XWiki.XWikiPreferences').getObject('XWiki.XWikiPreferences').getProperty('languages').value.split(','))
            #set($language = $services.localization.toLocale($locale.trim()).getDisplayLanguage())
            #set($displayLanguage = $language)
            #if($language.length() &gt; 0)
              #set($displayLanguage = "${language.substring(0, 1).toUpperCase()}${language.substring(1)}")
            #end
            &lt;option value="$locale.trim()"&gt;$displayLanguage&lt;/option&gt;
          #end
          &lt;/select&gt; (Supported languages list from your wiki administration)&lt;/div&gt;
          &lt;button id="hierarchyAddPage" class="btn btn-success"&gt;Add the page&lt;/button&gt;&lt;br&gt;
          &lt;p id="hierarchyPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyObjectModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add Object&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Space : &lt;span id="hierarchyObjectSpace"&gt;&lt;/span&gt;&lt;br&gt;
          &lt;div id="hierarchyObjectPageBlock"&gt;Page : &lt;span id="hierarchyObjectPage"&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div id="hierarchyObjectPageInputBlock"&gt;Name : &lt;input type="text" id="hierarchyObjectPageInput" value=""/&gt;&lt;input type="hidden" id="hierarchyObjectPageInputDefault" value=""/&gt;&lt;/div&gt;
          &lt;input type="hidden" id="hierarchyObjectClassName" /&gt;
          &lt;button id="hierarchyAddObject" class="btn btn-success"&gt;Add the object&lt;/button&gt;
          &lt;p id="hierarchyObjectModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyClassModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add class&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Space : &lt;span id="hierarchyClassSpace"&gt;&lt;/span&gt;&lt;br&gt;
          Name : &lt;input type="text" id="hierarchyClassInput" value=""/&gt;&lt;br&gt;
          &lt;div id="hierarchyAddSheetBlock"&gt;
            Sheet action : &lt;select id="hierarchyClassSheet"&gt;
              &lt;option value=""&gt;&lt;/option&gt;
              &lt;option value="view"&gt;View&lt;/option&gt;
              &lt;option value="edit"&gt;Edit&lt;/option&gt;
              &lt;option value="inline"&gt;Inline&lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;button id="hierarchyAddClass" class="btn btn-success"&gt;Add the class&lt;/button&gt;
          &lt;p id="hierarchyClassModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyCloseTabModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Unsaved content&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            You have unsaved content in this tab (&lt;span id="hierarchyCloseTabModalInfo"&gt;&lt;/span&gt;), do you want to continue? All unsaved modifications will be lost permanently&lt;br /&gt;
            &lt;button id="hierarchySaveAndCloseModal" class="btn btn-success"&gt;Save &amp; close the tab&lt;/button&gt; &lt;button id="hierarchyDiscardAndCloseModal" class="btn btn-danger"&gt;Close without saving&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorDeleteObjectModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Delete an object&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            Are you sure you want to delete that object : &lt;span id="editorDeletedObjectModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeleteObjectConfirmed" class="btn btn-danger"&gt;Delete the object&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorDeleteMultipleObjectsModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Delete a page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            Are you sure you want to delete that page : &lt;span id="editorDeleteMultipleObjectsModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeleteMultipleObjectConfirmed" class="btn btn-danger"&gt;Delete the page&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorDeletePageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Delete a page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            Are you sure you want to delete that page &lt;span id="editorDeletedPageModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeletePageConfirmed" class="btn btn-danger"&gt;Delete the page&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorDeleteClassModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Delete a class&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            Are you sure you want to delete the class : &lt;span id="editorDeletedClassModalInfo"&gt;&lt;/span&gt; ?&lt;br&gt;
            Delete also: &lt;label for="editorDeleteClassSheet"&gt;All bound sheets&lt;/label&gt; &lt;input type="checkbox" id="editorDeleteClassSheet" /&gt; &lt;label for="editorDeleteClassTemplate"&gt;The class template&lt;/label&gt; &lt;input type="checkbox" id="editorDeleteClassTemplate" /&gt; ?&lt;br&gt;
            &lt;button id="editorDeleteClassConfirmed" class="btn btn-danger"&gt;Delete the class&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorSwitchClassModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Switch class editor&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            You have unsaved content, do you want to continue?&lt;br /&gt;
            You have unsaved content in this tab, do you want to continue? All unsaved modifications will be lost permanently&lt;br /&gt;
            &lt;button id="hierarchySaveAndSwitchClassModal" class="btn btn-success"&gt;Save &amp; switch editor&lt;/button&gt; &lt;button id="hierarchyDiscardAndAndSwitchClassModal" class="btn btn-danger"&gt;Switch without saving&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="hierarchy-hidden"&gt;&lt;input type="hidden" id="hierarchyMasterDocName" value="$escapetool.url($masterDoc.name)" /&gt;&lt;input type="hidden" id="hierarchyMasterDocSpace" value="$escapetool.url($masterDoc.space)" /&gt;&lt;input type="hidden" id="xwikiNested" value="$nestedSpaces" /&gt;&lt;input type="hidden" id="hierarchyMainLanguage" value="$xwiki.getLanguagePreference()" /&gt;&lt;/div&gt;

&lt;div id="backgroundModalNoBootstrap"&gt;&lt;/div&gt;

{{/html}}
(% id="hierarchyStateBlock" %)(((
  (% id="hierarchyState" %)((()))(% id="hierarchySavingState" %)((()))(% id="hierarchyLoadingState" %)((()))
)))
{{/velocity}}</content>
</xwikidoc>
